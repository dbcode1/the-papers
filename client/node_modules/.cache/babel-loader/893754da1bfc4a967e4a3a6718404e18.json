{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataCard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = ({\n  data\n}) => {\n  // break up data\n  const nyt = data.data[0];\n  const gaurdian = data.data[1];\n\n  const process = arr => {\n    return typeof arr == 'undefined' ? null : arr.map(item => {\n      return item;\n    });\n  }; // const nytData = process(nyt);\n  // const gaurdianData = process(gaurdian);\n  // if (typeof nyt !== 'undefined') {\n  // \tObject.entries(gaurdianData).map(item => {\n  // \t\t//console.log(item);\n  // \t});\n  // }\n  // const combineData = (arr1, arr2) => {\n  // \treturn nytData !== null ? arr1.concat(arr2) : null;\n  // };\n  // // const allData = combineData(nytData, gaurdianData);\n  // // console.log(allData);\n\n\n  if (allData !== null) {\n    allData.map(item => {\n      if (allData) {\n        //console.log(item.webTitle);\n        return /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 12\n          }\n        }, item.webTitle);\n      }\n    });\n  }\n}; // if (typeof gaurdian !== 'undefined') {\n// \tgaurdian.map(item => {\n// \t\tconsole.log(item);\n// \t});\n// }\n\n\nDataCard.propTypes = {\n  DataCard: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","connect","PropTypes","DataCard","data","nyt","gaurdian","process","arr","map","item","allData","webTitle","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC9B;AACA,QAAMC,GAAG,GAAGD,IAAI,CAACA,IAAL,CAAU,CAAV,CAAZ;AACA,QAAME,QAAQ,GAAGF,IAAI,CAACA,IAAL,CAAU,CAAV,CAAjB;;AAEA,QAAMG,OAAO,GAAGC,GAAG,IAAI;AACtB,WAAO,OAAOA,GAAP,IAAc,WAAd,GACJ,IADI,GAEJA,GAAG,CAACC,GAAJ,CAAQC,IAAI,IAAI;AAChB,aAAOA,IAAP;AACC,KAFD,CAFH;AAKA,GAND,CAL8B,CAY9B;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AAEA,MAAIC,OAAO,KAAK,IAAhB,EAAsB;AACrBA,IAAAA,OAAO,CAACF,GAAR,CAAYC,IAAI,IAAI;AACnB,UAAIC,OAAJ,EAAa;AACZ;AACA,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAID,IAAI,CAACE,QAAT,CAAP;AACA;AACD,KALD;AAMA;AACD,CApCD,C,CAsCA;AACA;AACA;AACA;AACA;;;AAEAT,QAAQ,CAACU,SAAT,GAAqB;AACpBV,EAAAA,QAAQ,EAAED,SAAS,CAACY,IAAV,CAAeC,UADL;AAEpBX,EAAAA,IAAI,EAAEF,SAAS,CAACc,MAAV,CAAiBD;AAFH,CAArB;;AAIA,MAAME,eAAe,GAAGC,KAAK,KAAK;AACjCd,EAAAA,IAAI,EAAEc,KAAK,CAACd;AADqB,CAAL,CAA7B;;AAIA,eAAeH,OAAO,CAACgB,eAAD,CAAP,CAAyBd,QAAzB,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = ({ data }) => {\r\n\t// break up data\r\n\tconst nyt = data.data[0];\r\n\tconst gaurdian = data.data[1];\r\n\r\n\tconst process = arr => {\r\n\t\treturn typeof arr == 'undefined'\r\n\t\t\t? null\r\n\t\t\t: arr.map(item => {\r\n\t\t\t\t\treturn item;\r\n\t\t\t  });\r\n\t};\r\n\t// const nytData = process(nyt);\r\n\t// const gaurdianData = process(gaurdian);\r\n\r\n\t// if (typeof nyt !== 'undefined') {\r\n\t// \tObject.entries(gaurdianData).map(item => {\r\n\t// \t\t//console.log(item);\r\n\t// \t});\r\n\t// }\r\n\r\n\t// const combineData = (arr1, arr2) => {\r\n\t// \treturn nytData !== null ? arr1.concat(arr2) : null;\r\n\t// };\r\n\r\n\t// // const allData = combineData(nytData, gaurdianData);\r\n\t// // console.log(allData);\r\n\r\n\tif (allData !== null) {\r\n\t\tallData.map(item => {\r\n\t\t\tif (allData) {\r\n\t\t\t\t//console.log(item.webTitle);\r\n\t\t\t\treturn <p>{item.webTitle}</p>;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// if (typeof gaurdian !== 'undefined') {\r\n// \tgaurdian.map(item => {\r\n// \t\tconsole.log(item);\r\n// \t});\r\n// }\r\n\r\nDataCard.propTypes = {\r\n\tDataCard: PropTypes.func.isRequired,\r\n\tdata: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n\tdata: state.data\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}