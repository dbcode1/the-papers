{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataCard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = ({\n  data\n}) => {\n  // break up data\n  const nyt = data.data[0];\n  const gaurdian = data.data[1];\n\n  const process = arr => {\n    return typeof arr == 'undefined' ? null : arr.map(item => {\n      return item;\n    });\n  };\n\n  const nytData = () => {\n    return typeof nytData == 'undefined' ? null : nytData.map(item => {\n      console.log(item);\n    });\n  };\n\n  const gaurdianData = process(gaurdian);\n  console.log(Object.entries(nytData)); // nytData.map(item => {\n  // \tconsole.log(item);\n  // });\n\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, \"data\");\n}; // const combineData = (arr1, arr2) => {\n// \treturn nytData !== null ? arr1.concat(arr2) : null;\n// };\n// const allData = combineData(nytData, gaurdianData);\n// allData.map(item => {\n// \tconsole.log(item);\n// });\n// //const mapData = () => {\n// if (allData !== null) {\n// \tallData.map(item => {\n// \t\tif (allData) {\n// \t\t\tconsole.log(item);\n// \t\t}\n// \t});\n// }\n// //};\n// if (typeof gaurdian !== 'undefined') {\n// \tgaurdian.map(item => {\n// \t\tconsole.log(item);\n// \t});\n// }\n\n\nDataCard.propTypes = {\n  DataCard: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","connect","PropTypes","DataCard","data","nyt","gaurdian","process","arr","map","item","nytData","console","log","gaurdianData","Object","entries","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC9B;AACA,QAAMC,GAAG,GAAGD,IAAI,CAACA,IAAL,CAAU,CAAV,CAAZ;AACA,QAAME,QAAQ,GAAGF,IAAI,CAACA,IAAL,CAAU,CAAV,CAAjB;;AAEA,QAAMG,OAAO,GAAGC,GAAG,IAAI;AACtB,WAAO,OAAOA,GAAP,IAAc,WAAd,GACJ,IADI,GAEJA,GAAG,CAACC,GAAJ,CAAQC,IAAI,IAAI;AAChB,aAAOA,IAAP;AACC,KAFD,CAFH;AAKA,GAND;;AAQA,QAAMC,OAAO,GAAG,MAAM;AACrB,WAAO,OAAOA,OAAP,IAAkB,WAAlB,GACJ,IADI,GAEJA,OAAO,CAACF,GAAR,CAAYC,IAAI,IAAI;AACpBE,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACC,KAFD,CAFH;AAKA,GAND;;AAOA,QAAMI,YAAY,GAAGP,OAAO,CAACD,QAAD,CAA5B;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYE,MAAM,CAACC,OAAP,CAAeL,OAAf,CAAZ,EArB8B,CAsB9B;AACA;AACA;;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA,CA1BD,C,CA2BA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEAR,QAAQ,CAACc,SAAT,GAAqB;AACpBd,EAAAA,QAAQ,EAAED,SAAS,CAACgB,IAAV,CAAeC,UADL;AAEpBf,EAAAA,IAAI,EAAEF,SAAS,CAACkB,MAAV,CAAiBD;AAFH,CAArB;;AAIA,MAAME,eAAe,GAAGC,KAAK,KAAK;AACjClB,EAAAA,IAAI,EAAEkB,KAAK,CAAClB;AADqB,CAAL,CAA7B;;AAIA,eAAeH,OAAO,CAACoB,eAAD,CAAP,CAAyBlB,QAAzB,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = ({ data }) => {\r\n\t// break up data\r\n\tconst nyt = data.data[0];\r\n\tconst gaurdian = data.data[1];\r\n\r\n\tconst process = arr => {\r\n\t\treturn typeof arr == 'undefined'\r\n\t\t\t? null\r\n\t\t\t: arr.map(item => {\r\n\t\t\t\t\treturn item;\r\n\t\t\t  });\r\n\t};\r\n\r\n\tconst nytData = () => {\r\n\t\treturn typeof nytData == 'undefined'\r\n\t\t\t? null\r\n\t\t\t: nytData.map(item => {\r\n\t\t\t\t\tconsole.log(item);\r\n\t\t\t  });\r\n\t};\r\n\tconst gaurdianData = process(gaurdian);\r\n\tconsole.log(Object.entries(nytData));\r\n\t// nytData.map(item => {\r\n\t// \tconsole.log(item);\r\n\t// });\r\n\treturn <ul>data</ul>;\r\n};\r\n// const combineData = (arr1, arr2) => {\r\n// \treturn nytData !== null ? arr1.concat(arr2) : null;\r\n// };\r\n\r\n// const allData = combineData(nytData, gaurdianData);\r\n// allData.map(item => {\r\n// \tconsole.log(item);\r\n// });\r\n\r\n// //const mapData = () => {\r\n// if (allData !== null) {\r\n// \tallData.map(item => {\r\n// \t\tif (allData) {\r\n// \t\t\tconsole.log(item);\r\n// \t\t}\r\n// \t});\r\n// }\r\n// //};\r\n\r\n// if (typeof gaurdian !== 'undefined') {\r\n// \tgaurdian.map(item => {\r\n// \t\tconsole.log(item);\r\n// \t});\r\n// }\r\n\r\nDataCard.propTypes = {\r\n\tDataCard: PropTypes.func.isRequired,\r\n\tdata: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n\tdata: state.data\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}