{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataView.js\";\nimport React, { useEffect, useState } from 'react'; //import { Link, withRouter } from 'react-router-dom';\n\nimport { getNyc } from '../actions/getNyc';\nimport { getGaurdian } from '../actions/getGaurdian';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DataCard from './DataCard';\n\nconst DataView = ({\n  getNyc,\n  getGaurdian,\n  nyc\n}) => {\n  useEffect(() => {\n    getNyc();\n    getGaurdian();\n  }, [getNyc, getGaurdian]); //const intialState = { nycResults: [] };\n  // const [nycResults, setResults] = useState([]);\n\n  const nycResults = [];\n  const gaurdianResults = [];\n\n  const setResult = arr => {\n    const pushItems = arr => {\n      arr.push(arg, arg);\n    };\n\n    if (typeof arr === undefined) {\n      console.log('undef');\n      return;\n    } else if (arr.hasOwnProperty(`$[arr]`)) {\n      Object.entries(arr).map(([key, value]) => {\n        pushItems(arr, value);\n      });\n    }\n\n    return arr;\n  };\n\n  return /*#__PURE__*/React.createElement(DataCard, {\n    results: setResult(nycResults),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  });\n}; // const DataView = ({ getNyc, getGaurdian, nyc }) => {\n// \tuseEffect(() => {\n// \t\tgetNyc();\n// \t\tgetGaurdian();\n// \t}, [getNyc]);\n// \tconst intialState = { nycResults: [] };\n// \tconst [nycResults, setResults] = useState([nycResults]);\n// \tconst results = arr => {\n// \t\tsetResults([\n// \t\t\t...nycResults,\n// \t\t\t{\n// \t\t\t\tid: arr.length,\n// \t\t\t\tarr: arr.push(value)\n// \t\t\t}\n// \t\t]);\n// \tif (typeof arr === undefined) {\n// \t\treturn;\n// \t} else if (arr.hasOwnProperty('nyc')) {\n// \t\tObject.entries(arr.arr).map(([key, value]) => {\n// \t\t\tsetResults(nycResults, value);\n// \t\t});\n// \t}\n// }\n// }\n// \t//results(nycResults);\n// \treturn <DataCard results={nycResults} />;\n// };\n\n\nDataView.propTypes = {\n  getNyc: PropTypes.func.isRequired,\n  getGaurdian: PropTypes.func.isRequired,\n  nyc: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc //: state.gaurdian.gaurdianData\n\n});\n\nexport default connect(mapStateToProps, {\n  getNyc,\n  getGaurdian\n})(DataView);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataView.js"],"names":["React","useEffect","useState","getNyc","getGaurdian","connect","PropTypes","DataCard","DataView","nyc","nycResults","gaurdianResults","setResult","arr","pushItems","push","arg","undefined","console","log","hasOwnProperty","Object","entries","map","key","value","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEL,EAAAA,MAAF;AAAUC,EAAAA,WAAV;AAAuBK,EAAAA;AAAvB,CAAD,KAAkC;AAClDR,EAAAA,SAAS,CAAC,MAAM;AACfE,IAAAA,MAAM;AACNC,IAAAA,WAAW;AACX,GAHQ,EAGN,CAACD,MAAD,EAASC,WAAT,CAHM,CAAT,CADkD,CAMlD;AAEA;;AAEA,QAAMM,UAAU,GAAG,EAAnB;AACA,QAAMC,eAAe,GAAG,EAAxB;;AAEA,QAAMC,SAAS,GAAGC,GAAG,IAAI;AACxB,UAAMC,SAAS,GAAGD,GAAG,IAAI;AACxBA,MAAAA,GAAG,CAACE,IAAJ,CAASC,GAAT,EAAcA,GAAd;AACA,KAFD;;AAIA,QAAI,OAAOH,GAAP,KAAeI,SAAnB,EAA8B;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA;AACA,KAHD,MAGO,IAAIN,GAAG,CAACO,cAAJ,CAAoB,QAApB,CAAJ,EAAkC;AACxCC,MAAAA,MAAM,CAACC,OAAP,CAAeT,GAAf,EAAoBU,GAApB,CAAwB,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AACzCX,QAAAA,SAAS,CAACD,GAAD,EAAMY,KAAN,CAAT;AACA,OAFD;AAGA;;AACD,WAAOZ,GAAP;AACA,GAdD;;AAeA,sBAAO,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAED,SAAS,CAACF,UAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACA,CA7BD,C,CA+BA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;AAEAF,QAAQ,CAACkB,SAAT,GAAqB;AACpBvB,EAAAA,MAAM,EAAEG,SAAS,CAACqB,IAAV,CAAeC,UADH;AAEpBxB,EAAAA,WAAW,EAAEE,SAAS,CAACqB,IAAV,CAAeC,UAFR;AAGpBnB,EAAAA,GAAG,EAAEH,SAAS,CAACuB,MAAV,CAAiBD;AAHF,CAArB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AACjCtB,EAAAA,GAAG,EAAEsB,KAAK,CAACtB,GADsB,CAEjC;;AAFiC,CAAL,CAA7B;;AAKA,eAAeJ,OAAO,CAACyB,eAAD,EAAkB;AAAE3B,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAAkDI,QAAlD,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n//import { Link, withRouter } from 'react-router-dom';\r\nimport { getNyc } from '../actions/getNyc';\r\nimport { getGaurdian } from '../actions/getGaurdian';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DataCard from './DataCard';\r\n\r\nconst DataView = ({ getNyc, getGaurdian, nyc }) => {\r\n\tuseEffect(() => {\r\n\t\tgetNyc();\r\n\t\tgetGaurdian();\r\n\t}, [getNyc, getGaurdian]);\r\n\r\n\t//const intialState = { nycResults: [] };\r\n\r\n\t// const [nycResults, setResults] = useState([]);\r\n\r\n\tconst nycResults = [];\r\n\tconst gaurdianResults = [];\r\n\r\n\tconst setResult = arr => {\r\n\t\tconst pushItems = arr => {\r\n\t\t\tarr.push(arg, arg);\r\n\t\t};\r\n\r\n\t\tif (typeof arr === undefined) {\r\n\t\t\tconsole.log('undef');\r\n\t\t\treturn;\r\n\t\t} else if (arr.hasOwnProperty(`$[arr]`)) {\r\n\t\t\tObject.entries(arr).map(([key, value]) => {\r\n\t\t\t\tpushItems(arr, value);\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn arr;\r\n\t};\r\n\treturn <DataCard results={setResult(nycResults)} />;\r\n};\r\n\r\n// const DataView = ({ getNyc, getGaurdian, nyc }) => {\r\n// \tuseEffect(() => {\r\n// \t\tgetNyc();\r\n// \t\tgetGaurdian();\r\n// \t}, [getNyc]);\r\n\r\n// \tconst intialState = { nycResults: [] };\r\n\r\n// \tconst [nycResults, setResults] = useState([nycResults]);\r\n\r\n// \tconst results = arr => {\r\n// \t\tsetResults([\r\n// \t\t\t...nycResults,\r\n// \t\t\t{\r\n// \t\t\t\tid: arr.length,\r\n// \t\t\t\tarr: arr.push(value)\r\n// \t\t\t}\r\n// \t\t]);\r\n\r\n// \tif (typeof arr === undefined) {\r\n// \t\treturn;\r\n// \t} else if (arr.hasOwnProperty('nyc')) {\r\n// \t\tObject.entries(arr.arr).map(([key, value]) => {\r\n// \t\t\tsetResults(nycResults, value);\r\n// \t\t});\r\n// \t}\r\n// }\r\n// }\r\n\r\n// \t//results(nycResults);\r\n\r\n// \treturn <DataCard results={nycResults} />;\r\n// };\r\n\r\nDataView.propTypes = {\r\n\tgetNyc: PropTypes.func.isRequired,\r\n\tgetGaurdian: PropTypes.func.isRequired,\r\n\tnyc: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n\tnyc: state.nyc\r\n\t//: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps, { getNyc, getGaurdian })(DataView);\r\n"]},"metadata":{},"sourceType":"module"}