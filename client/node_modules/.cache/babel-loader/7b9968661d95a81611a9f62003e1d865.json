{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataView.js\";\nimport React, { useEffect, useState } from 'react'; //import { Link, withRouter } from 'react-router-dom';\n\nimport { getNyc } from '../actions/getNyc';\nimport { getGaurdian } from '../actions/getGaurdian';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DataCard from './DataCard'; // const DataView = ({ getNyc, getGaurdian, nyc }) => {\n// \tuseEffect(() => {\n// \t\tgetNyc();\n// \t\tgetGaurdian();\n// \t}, [getNyc]);\n// \tconst intialState = { nycResults: [] };\n// \tconst [nycResults, setResults] = useState([]);\n// \tconst setResult = (arr, arg) => {\n// \t\tarr.push(arg);\n// \t};\n// \tif (typeof nyc === undefined) {\n// \t\treturn;\n// \t} else if (nyc.hasOwnProperty('nyc')) {\n// \t\tObject.entries(nyc.nyc).map(([key, value]) => {\n// \t\t\tnycResults.push(value);\n// \t\t});\n// \t}\n// \treturn <DataCard results={nycResults} />;\n// };\n\nconst DataView = ({\n  getNyc,\n  getGaurdian,\n  nyc,\n  gaurdian\n}) => {\n  useEffect(() => {\n    getNyc();\n    getGaurdian();\n  }, [getNyc, getGaurdian]);\n  const nycResults = [];\n\n  if (!nyc || !gaurdian) {\n    return null;\n  }\n\n  const filterResults = (arr, res) => {\n    console.log(arr);\n\n    if (typeof res === undefined) {\n      return;\n    } else if (res.hasOwnProperty('nyc' || 'gaurdian')) {\n      Object.entries(res).map(([key, value]) => {\n        arr.push(value);\n      });\n    }\n  };\n\n  console.log(filterResults(nycResults, nyc));\n  return /*#__PURE__*/React.createElement(DataCard, {\n    results: filterResults(nycResults, nyc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  });\n};\n\nDataView.propTypes = {\n  getNyc: PropTypes.func.isRequired,\n  getGaurdian: PropTypes.func.isRequired,\n  nyc: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc //: state.gaurdian.gaurdianData\n\n});\n\nexport default connect(mapStateToProps, {\n  getNyc,\n  getGaurdian\n})(DataView);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataView.js"],"names":["React","useEffect","useState","getNyc","getGaurdian","connect","PropTypes","DataCard","DataView","nyc","gaurdian","nycResults","filterResults","arr","res","console","log","undefined","hasOwnProperty","Object","entries","map","key","value","push","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEL,EAAAA,MAAF;AAAUC,EAAAA,WAAV;AAAuBK,EAAAA,GAAvB;AAA4BC,EAAAA;AAA5B,CAAD,KAA4C;AAC5DT,EAAAA,SAAS,CAAC,MAAM;AACfE,IAAAA,MAAM;AACNC,IAAAA,WAAW;AACX,GAHQ,EAGN,CAACD,MAAD,EAASC,WAAT,CAHM,CAAT;AAKA,QAAMO,UAAU,GAAG,EAAnB;;AAEA,MAAI,CAACF,GAAD,IAAQ,CAACC,QAAb,EAAuB;AACtB,WAAO,IAAP;AACA;;AAED,QAAME,aAAa,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;;AACA,QAAI,OAAOC,GAAP,KAAeG,SAAnB,EAA8B;AAC7B;AACA,KAFD,MAEO,IAAIH,GAAG,CAACI,cAAJ,CAAmB,SAAS,UAA5B,CAAJ,EAA6C;AACnDC,MAAAA,MAAM,CAACC,OAAP,CAAeN,GAAf,EAAoBO,GAApB,CAAwB,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AACzCV,QAAAA,GAAG,CAACW,IAAJ,CAASD,KAAT;AACA,OAFD;AAGA;AACD,GATD;;AAUAR,EAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAa,CAACD,UAAD,EAAaF,GAAb,CAAzB;AACA,sBAAO,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAEG,aAAa,CAACD,UAAD,EAAaF,GAAb,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACA,CAxBD;;AA0BAD,QAAQ,CAACiB,SAAT,GAAqB;AACpBtB,EAAAA,MAAM,EAAEG,SAAS,CAACoB,IAAV,CAAeC,UADH;AAEpBvB,EAAAA,WAAW,EAAEE,SAAS,CAACoB,IAAV,CAAeC,UAFR;AAGpBlB,EAAAA,GAAG,EAAEH,SAAS,CAACsB,MAAV,CAAiBD;AAHF,CAArB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AACjCrB,EAAAA,GAAG,EAAEqB,KAAK,CAACrB,GADsB,CAEjC;;AAFiC,CAAL,CAA7B;;AAKA,eAAeJ,OAAO,CAACwB,eAAD,EAAkB;AAAE1B,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAAkDI,QAAlD,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n//import { Link, withRouter } from 'react-router-dom';\r\nimport { getNyc } from '../actions/getNyc';\r\nimport { getGaurdian } from '../actions/getGaurdian';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DataCard from './DataCard';\r\n\r\n// const DataView = ({ getNyc, getGaurdian, nyc }) => {\r\n// \tuseEffect(() => {\r\n// \t\tgetNyc();\r\n// \t\tgetGaurdian();\r\n// \t}, [getNyc]);\r\n\r\n// \tconst intialState = { nycResults: [] };\r\n\r\n// \tconst [nycResults, setResults] = useState([]);\r\n\r\n// \tconst setResult = (arr, arg) => {\r\n// \t\tarr.push(arg);\r\n// \t};\r\n\r\n// \tif (typeof nyc === undefined) {\r\n// \t\treturn;\r\n// \t} else if (nyc.hasOwnProperty('nyc')) {\r\n// \t\tObject.entries(nyc.nyc).map(([key, value]) => {\r\n// \t\t\tnycResults.push(value);\r\n// \t\t});\r\n// \t}\r\n// \treturn <DataCard results={nycResults} />;\r\n// };\r\n\r\nconst DataView = ({ getNyc, getGaurdian, nyc, gaurdian }) => {\r\n\tuseEffect(() => {\r\n\t\tgetNyc();\r\n\t\tgetGaurdian();\r\n\t}, [getNyc, getGaurdian]);\r\n\r\n\tconst nycResults = [];\r\n\r\n\tif (!nyc || !gaurdian) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst filterResults = (arr, res) => {\r\n\t\tconsole.log(arr);\r\n\t\tif (typeof res === undefined) {\r\n\t\t\treturn;\r\n\t\t} else if (res.hasOwnProperty('nyc' || 'gaurdian')) {\r\n\t\t\tObject.entries(res).map(([key, value]) => {\r\n\t\t\t\tarr.push(value);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tconsole.log(filterResults(nycResults, nyc));\r\n\treturn <DataCard results={filterResults(nycResults, nyc)} />;\r\n};\r\n\r\nDataView.propTypes = {\r\n\tgetNyc: PropTypes.func.isRequired,\r\n\tgetGaurdian: PropTypes.func.isRequired,\r\n\tnyc: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n\tnyc: state.nyc\r\n\t//: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps, { getNyc, getGaurdian })(DataView);\r\n"]},"metadata":{},"sourceType":"module"}