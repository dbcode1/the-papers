{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataCard.js\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = (props, nycState, gaurdianData) => {\n  const nyc = props.nycState;\n  const gaurdian = props.gaurdianData;\n  const filteredNyc = [];\n  const filteredGaurdian = [];\n\n  if (nyc) {\n    const nycArr = Object.entries(nyc); // nycArr.map(([key, value]) => {\n    // \tif (key === 'data') {\n    // \t\tconsole.log(value);\n    // \t}\n    // });\n    // // //console.log(typeof nycArr);\n\n    const results = nycArr[0][1].results;\n    const iterateResults = Object.entries(results);\n    iterateResults.forEach(([key, value]) => {\n      filteredNyc.push(value);\n    }); // results.map(item => {\n    // \tfilteredNyc.push(item);\n    // });\n    // for (const item in results) {\n    // \tfilteredNyc.push(results[item]);\n    // }\n  } // const nycResults = getNycResults();ff\n  // console.log(nycResults);\n  // nycResults.map(item => {\n  // \tconsole.log(item);\n  // });\n  // const nycFiltered = Object.keys(nyc).forEach(\n  // \tkey => nyc[key] == null && delete nyc[key]\n  // );\n  // for (let item in nyc) {\n  // \t//console.log(nyc[item]);\n  // }\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }\n  }, filteredNyc.forEach(([key, value]) => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, value)));\n};\n\nDataCard.propTypes = {\n  nycState: PropTypes.object.isRequired,\n  gaurdianData: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  nycState: state.nyc.nycState,\n  gaurdianData: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","useState","connect","PropTypes","DataCard","props","nycState","gaurdianData","nyc","gaurdian","filteredNyc","filteredGaurdian","nycArr","Object","entries","results","iterateResults","forEach","key","value","push","propTypes","object","isRequired","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,YAAlB,KAAmC;AACnD,QAAMC,GAAG,GAAGH,KAAK,CAACC,QAAlB;AACA,QAAMG,QAAQ,GAAGJ,KAAK,CAACE,YAAvB;AACA,QAAMG,WAAW,GAAG,EAApB;AACA,QAAMC,gBAAgB,GAAG,EAAzB;;AAEA,MAAIH,GAAJ,EAAS;AACR,UAAMI,MAAM,GAAGC,MAAM,CAACC,OAAP,CAAeN,GAAf,CAAf,CADQ,CAGR;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAMO,OAAO,GAAGH,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,EAAaG,OAA7B;AACA,UAAMC,cAAc,GAAGH,MAAM,CAACC,OAAP,CAAeC,OAAf,CAAvB;AAEAC,IAAAA,cAAc,CAACC,OAAf,CAAuB,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AACxCT,MAAAA,WAAW,CAACU,IAAZ,CAAiBD,KAAjB;AACA,KAFD,EAbQ,CAiBR;AACA;AACA;AAEA;AACA;AACA;AACA,GA9BkD,CAgCnD;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AACA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACET,WAAW,CAACO,OAAZ,CAAoB,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,kBACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAL,CADA,CADF,CADD;AAOA,CAvDD;;AAwDAf,QAAQ,CAACiB,SAAT,GAAqB;AACpBf,EAAAA,QAAQ,EAAEH,SAAS,CAACmB,MAAV,CAAiBC,UADP;AAEpBhB,EAAAA,YAAY,EAAEJ,SAAS,CAACmB,MAAV,CAAiBC;AAFX,CAArB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjCnB,EAAAA,QAAQ,EAAEmB,KAAK,CAACjB,GAAN,CAAUF,QADa;AAEjCC,EAAAA,YAAY,EAAEkB,KAAK,CAAChB,QAAN,CAAeF;AAFI,CAAL,CAA7B;;AAKA,eAAeL,OAAO,CAACsB,eAAD,CAAP,CAAyBpB,QAAzB,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = (props, nycState, gaurdianData) => {\r\n\tconst nyc = props.nycState;\r\n\tconst gaurdian = props.gaurdianData;\r\n\tconst filteredNyc = [];\r\n\tconst filteredGaurdian = [];\r\n\r\n\tif (nyc) {\r\n\t\tconst nycArr = Object.entries(nyc);\r\n\r\n\t\t// nycArr.map(([key, value]) => {\r\n\t\t// \tif (key === 'data') {\r\n\t\t// \t\tconsole.log(value);\r\n\t\t// \t}\r\n\t\t// });\r\n\t\t// // //console.log(typeof nycArr);\r\n\r\n\t\tconst results = nycArr[0][1].results;\r\n\t\tconst iterateResults = Object.entries(results);\r\n\r\n\t\titerateResults.forEach(([key, value]) => {\r\n\t\t\tfilteredNyc.push(value);\r\n\t\t});\r\n\r\n\t\t// results.map(item => {\r\n\t\t// \tfilteredNyc.push(item);\r\n\t\t// });\r\n\r\n\t\t// for (const item in results) {\r\n\t\t// \tfilteredNyc.push(results[item]);\r\n\t\t// }\r\n\t}\r\n\r\n\t// const nycResults = getNycResults();ff\r\n\t// console.log(nycResults);\r\n\r\n\t// nycResults.map(item => {\r\n\t// \tconsole.log(item);\r\n\t// });\r\n\r\n\t// const nycFiltered = Object.keys(nyc).forEach(\r\n\t// \tkey => nyc[key] == null && delete nyc[key]\r\n\t// );\r\n\r\n\t// for (let item in nyc) {\r\n\t// \t//console.log(nyc[item]);\r\n\t// }\r\n\r\n\t// }\r\n\treturn (\r\n\t\t<ol>\r\n\t\t\t{filteredNyc.forEach(([key, value]) => (\r\n\t\t\t\t<li>{value}</li>\r\n\t\t\t))}\r\n\t\t</ol>\r\n\t);\r\n};\r\nDataCard.propTypes = {\r\n\tnycState: PropTypes.object.isRequired,\r\n\tgaurdianData: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\tnycState: state.nyc.nycState,\r\n\tgaurdianData: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}