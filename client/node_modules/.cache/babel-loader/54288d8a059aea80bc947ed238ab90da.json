{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataView.js\";\nimport React, { useEffect, useState } from 'react'; //import { Link, withRouter } from 'react-router-dom';\n\nimport { getNyc } from '../actions/getNyc';\nimport { getGaurdian } from '../actions/getGaurdian';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DataCard from './DataCard'; // const DataView = ({ getNyc, getGaurdian, nyc }) => {\n// \tuseEffect(() => {\n// \t\tgetNyc();\n// \t\tgetGaurdian();\n// \t}, [getNyc]);\n// \tconst intialState = { nycResults: [] };\n// \tconst [nycResults, setResults] = useState([]);\n// \tconst Update = () => {\n// \t\tconst setResult = (arr, arg) => {\n// \t\t\tarr.push(arg);\n// \t\t};\n// \t};\n// \tif (typeof nyc === undefined) {\n// \t\treturn;\n// \t} else if (nyc.hasOwnProperty('nyc')) {\n// \t\tObject.entries(nyc.nyc).map(([key, value]) => {\n// \t\t\tnycResults.push(value);\n// \t\t});\n// \t}\n// \treturn <DataCard results={nycResults} />;\n// };\n\nconst intialState = {\n  nycResults: []\n};\n\nconst DataView = ({\n  state,\n  getNyc,\n  getGaurdian,\n  nyc,\n  gaurdian\n}) => {\n  useEffect(() => {\n    getNyc();\n    getGaurdian();\n  }, [getNyc, getGaurdian]);\n  const [nycResults, setResults] = useState([intialState]);\n\n  const Update = state => {\n    const setResult = (arr, arg) => {\n      arr.push(arg);\n    };\n  };\n\n  Update(nyc, nycResults);\n\n  if (typeof nyc === undefined) {\n    return;\n  } else if (nyc.hasOwnProperty('nyc')) {\n    Object.entries(nyc.nyc).map(([key, value]) => {\n      nycResults.push(value);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, state); // return <DataCard state={state} />;\n}; //useEffect(() => {\n// \t\tgetNyc();\n// \t\tgetGaurdian();\n// \t}, [getNyc]);\n// const DataView = ({ props, getNyc, getGaurdian, nyc, gaurdian, props }) => {\n// \tuseEffect(() => {\n// \t\tgetNyc();\n// \t\tgetGaurdian();\n// \t}, [getNyc, getGaurdian]);\n// \tconst [nycResults, setNyc] = useState([]);\n// \tObject.entries(nyc).map(([key, value]) => {\n// \t\tsetNyc(value);\n// \t\tconsole.log('update', nycResults);\n// \t});\n// \treturn <DataCard results={nycResults} />;\n// };\n//function to map\n// //create a function to filterResults\n// const filterResults = (arr, res, state) => {\n// \tconst nameCheck = res.hasOwnProperty('nyc') ? 'nyc.nyc' : 'gaurdian';\n// \t// const results =\n// \t// \tnameCheck === 'nyc.nyc'\n// \t// \t\t? mapper(nyResults, nyc)\n// \t// \t\t: mapper(gaurdianResults, gaurdian);\n// \t//return results;\n// };\n// filterResults(nycResults, nyc);\n\n\nDataView.propTypes = {\n  getNyc: PropTypes.func.isRequired,\n  getGaurdian: PropTypes.func.isRequired,\n  nyc: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc,\n  gaurdian: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps, {\n  getNyc,\n  getGaurdian\n})(DataView);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataView.js"],"names":["React","useEffect","useState","getNyc","getGaurdian","connect","PropTypes","DataCard","intialState","nycResults","DataView","state","nyc","gaurdian","setResults","Update","setResult","arr","arg","push","undefined","hasOwnProperty","Object","entries","map","key","value","propTypes","func","isRequired","object","mapStateToProps","gaurdianData"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAApB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASR,EAAAA,MAAT;AAAiBC,EAAAA,WAAjB;AAA8BQ,EAAAA,GAA9B;AAAmCC,EAAAA;AAAnC,CAAD,KAAmD;AACnEZ,EAAAA,SAAS,CAAC,MAAM;AACfE,IAAAA,MAAM;AACNC,IAAAA,WAAW;AACX,GAHQ,EAGN,CAACD,MAAD,EAASC,WAAT,CAHM,CAAT;AAKA,QAAM,CAACK,UAAD,EAAaK,UAAb,IAA2BZ,QAAQ,CAAC,CAACM,WAAD,CAAD,CAAzC;;AAEA,QAAMO,MAAM,GAAGJ,KAAK,IAAI;AACvB,UAAMK,SAAS,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/BD,MAAAA,GAAG,CAACE,IAAJ,CAASD,GAAT;AACA,KAFD;AAGA,GAJD;;AAMAH,EAAAA,MAAM,CAACH,GAAD,EAAMH,UAAN,CAAN;;AAEA,MAAI,OAAOG,GAAP,KAAeQ,SAAnB,EAA8B;AAC7B;AACA,GAFD,MAEO,IAAIR,GAAG,CAACS,cAAJ,CAAmB,KAAnB,CAAJ,EAA+B;AACrCC,IAAAA,MAAM,CAACC,OAAP,CAAeX,GAAG,CAACA,GAAnB,EAAwBY,GAAxB,CAA4B,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC7CjB,MAAAA,UAAU,CAACU,IAAX,CAAgBO,KAAhB;AACA,KAFD;AAGA;;AACD,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMf,KAAN,CAAP,CAvBmE,CAwBnE;AACA,CAzBD,C,CA2BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;AAEAD,QAAQ,CAACiB,SAAT,GAAqB;AACpBxB,EAAAA,MAAM,EAAEG,SAAS,CAACsB,IAAV,CAAeC,UADH;AAEpBzB,EAAAA,WAAW,EAAEE,SAAS,CAACsB,IAAV,CAAeC,UAFR;AAGpBjB,EAAAA,GAAG,EAAEN,SAAS,CAACwB,MAAV,CAAiBD;AAHF,CAArB;;AAKA,MAAME,eAAe,GAAGpB,KAAK,KAAK;AACjCC,EAAAA,GAAG,EAAED,KAAK,CAACC,GADsB;AAEjCC,EAAAA,QAAQ,EAAEF,KAAK,CAACE,QAAN,CAAemB;AAFQ,CAAL,CAA7B;;AAKA,eAAe3B,OAAO,CAAC0B,eAAD,EAAkB;AAAE5B,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAAkDM,QAAlD,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n//import { Link, withRouter } from 'react-router-dom';\r\nimport { getNyc } from '../actions/getNyc';\r\nimport { getGaurdian } from '../actions/getGaurdian';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DataCard from './DataCard';\r\n\r\n// const DataView = ({ getNyc, getGaurdian, nyc }) => {\r\n// \tuseEffect(() => {\r\n// \t\tgetNyc();\r\n// \t\tgetGaurdian();\r\n// \t}, [getNyc]);\r\n\r\n// \tconst intialState = { nycResults: [] };\r\n\r\n// \tconst [nycResults, setResults] = useState([]);\r\n\r\n// \tconst Update = () => {\r\n// \t\tconst setResult = (arr, arg) => {\r\n// \t\t\tarr.push(arg);\r\n// \t\t};\r\n// \t};\r\n\r\n// \tif (typeof nyc === undefined) {\r\n// \t\treturn;\r\n// \t} else if (nyc.hasOwnProperty('nyc')) {\r\n// \t\tObject.entries(nyc.nyc).map(([key, value]) => {\r\n// \t\t\tnycResults.push(value);\r\n// \t\t});\r\n// \t}\r\n// \treturn <DataCard results={nycResults} />;\r\n// };\r\n\r\nconst intialState = { nycResults: [] };\r\n\r\nconst DataView = ({ state, getNyc, getGaurdian, nyc, gaurdian }) => {\r\n\tuseEffect(() => {\r\n\t\tgetNyc();\r\n\t\tgetGaurdian();\r\n\t}, [getNyc, getGaurdian]);\r\n\r\n\tconst [nycResults, setResults] = useState([intialState]);\r\n\r\n\tconst Update = state => {\r\n\t\tconst setResult = (arr, arg) => {\r\n\t\t\tarr.push(arg);\r\n\t\t};\r\n\t};\r\n\r\n\tUpdate(nyc, nycResults);\r\n\r\n\tif (typeof nyc === undefined) {\r\n\t\treturn;\r\n\t} else if (nyc.hasOwnProperty('nyc')) {\r\n\t\tObject.entries(nyc.nyc).map(([key, value]) => {\r\n\t\t\tnycResults.push(value);\r\n\t\t});\r\n\t}\r\n\treturn <div>{state}</div>;\r\n\t// return <DataCard state={state} />;\r\n};\r\n\r\n//useEffect(() => {\r\n// \t\tgetNyc();\r\n// \t\tgetGaurdian();\r\n// \t}, [getNyc]);\r\n\r\n// const DataView = ({ props, getNyc, getGaurdian, nyc, gaurdian, props }) => {\r\n// \tuseEffect(() => {\r\n// \t\tgetNyc();\r\n// \t\tgetGaurdian();\r\n// \t}, [getNyc, getGaurdian]);\r\n\r\n// \tconst [nycResults, setNyc] = useState([]);\r\n// \tObject.entries(nyc).map(([key, value]) => {\r\n// \t\tsetNyc(value);\r\n// \t\tconsole.log('update', nycResults);\r\n// \t});\r\n// \treturn <DataCard results={nycResults} />;\r\n// };\r\n\r\n//function to map\r\n\r\n// //create a function to filterResults\r\n// const filterResults = (arr, res, state) => {\r\n// \tconst nameCheck = res.hasOwnProperty('nyc') ? 'nyc.nyc' : 'gaurdian';\r\n\r\n// \t// const results =\r\n// \t// \tnameCheck === 'nyc.nyc'\r\n// \t// \t\t? mapper(nyResults, nyc)\r\n// \t// \t\t: mapper(gaurdianResults, gaurdian);\r\n\r\n// \t//return results;\r\n// };\r\n\r\n// filterResults(nycResults, nyc);\r\n\r\nDataView.propTypes = {\r\n\tgetNyc: PropTypes.func.isRequired,\r\n\tgetGaurdian: PropTypes.func.isRequired,\r\n\tnyc: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n\tnyc: state.nyc,\r\n\tgaurdian: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps, { getNyc, getGaurdian })(DataView);\r\n"]},"metadata":{},"sourceType":"module"}