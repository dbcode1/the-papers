{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport setAuthToken from './utils/setAuthToken';\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nlet currentState;\nstore.subscribe(() => {\n  // keep track of the previous and current state to compare changes\n  let previousState = currentState;\n  console.log(previousState);\n  currentState = store.getState(); // if the token changes set the value in localStorage\n\n  if (previousState && previousState.auth.token !== currentState.auth.token) {\n    const token = currentState.auth.token;\n    token ? localStorage.setItem('token', token) : localStorage.removeItem('token');\n  }\n});\nexport default store;","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","setAuthToken","initialState","middleware","store","currentState","subscribe","previousState","console","log","getState","auth","token","localStorage","setItem","removeItem"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAG,CAACJ,KAAD,CAAnB;AAEA,MAAMK,KAAK,GAAGR,WAAW,CACxBI,WADwB,EAExBE,YAFwB,EAGxBJ,mBAAmB,CAACD,eAAe,CAAC,GAAGM,UAAJ,CAAhB,CAHK,CAAzB;AAMA,IAAIE,YAAJ;AAEAD,KAAK,CAACE,SAAN,CAAgB,MAAM;AACrB;AACA,MAAIC,aAAa,GAAGF,YAApB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;AACAF,EAAAA,YAAY,GAAGD,KAAK,CAACM,QAAN,EAAf,CAJqB,CAKrB;;AACA,MAAIH,aAAa,IAAIA,aAAa,CAACI,IAAd,CAAmBC,KAAnB,KAA6BP,YAAY,CAACM,IAAb,CAAkBC,KAApE,EAA2E;AAC1E,UAAMA,KAAK,GAAGP,YAAY,CAACM,IAAb,CAAkBC,KAAhC;AACAA,IAAAA,KAAK,GACFC,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,KAA9B,CADE,GAEFC,YAAY,CAACE,UAAb,CAAwB,OAAxB,CAFH;AAGA;AACD,CAZD;AAaA,eAAeX,KAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\nimport setAuthToken from './utils/setAuthToken';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n\trootReducer,\r\n\tinitialState,\r\n\tcomposeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nlet currentState;\r\n\r\nstore.subscribe(() => {\r\n\t// keep track of the previous and current state to compare changes\r\n\tlet previousState = currentState;\r\n\tconsole.log(previousState);\r\n\tcurrentState = store.getState();\r\n\t// if the token changes set the value in localStorage\r\n\tif (previousState && previousState.auth.token !== currentState.auth.token) {\r\n\t\tconst token = currentState.auth.token;\r\n\t\ttoken\r\n\t\t\t? localStorage.setItem('token', token)\r\n\t\t\t: localStorage.removeItem('token');\r\n\t}\r\n});\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}