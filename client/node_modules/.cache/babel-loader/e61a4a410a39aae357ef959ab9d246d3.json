{"ast":null,"code":"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = (props, nycState, gaurdianData) => {\n  let nyc = props.nycState;\n  const gaurdian = props.gaurdianData; // if (nyc) {\n  // nyc.data.results.map(item => {\n  // \tconsole.log(item);\n  // });\n  // }\n\n  const nycArr = nyc.data.results;\n\n  if (nyc) {\n    for (const item in nycArr) {\n      console.log(nycArr[item]);\n    }\n  } //nyc = nyc.filter(obj => obj);\n  //console.log(nyc);\n  // const filter =\n  // \tnyc\n  // \t\t? nyc.data.results.map(item => {\n  // \t\t\t\treturn item;\n  // \t\t  })\n  // \t\t: null;\n  // console.log(filter);\n  //const filter = nyc.filter(item => item);\n  // const filteredNyc = nyc.data.results.filter(item => item !== null);\n  // for (let item in nyc) {\n  // \t//console.log(nyc[item]);\n  // }\n  // }\n  // return (\n  // \t<ol>\n  // \t\t{nycArr.map}(item => (\n  // \t\t\t<li key={item.url}>{item.url.key}</li>\n  // \t\t))}\n  // \t\t{gaurdianArr.map(item => (\n  // \t\t\t<li>{item.webTitle}</li>\n  // \t\t))}\n  // \t</ol>\n  // );\n\n\n  return 'data';\n};\n\nDataCard.propTypes = {\n  nycState: PropTypes.object.isRequired,\n  gaurdianData: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  nycState: state.nyc.nycState,\n  gaurdianData: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","useState","connect","PropTypes","DataCard","props","nycState","gaurdianData","nyc","gaurdian","nycArr","data","results","item","console","log","propTypes","object","isRequired","mapStateToProps","state"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,YAAlB,KAAmC;AACnD,MAAIC,GAAG,GAAGH,KAAK,CAACC,QAAhB;AACA,QAAMG,QAAQ,GAAGJ,KAAK,CAACE,YAAvB,CAFmD,CAInD;AACA;AACA;AACA;AACA;;AACA,QAAMG,MAAM,GAAGF,GAAG,CAACG,IAAJ,CAASC,OAAxB;;AAEA,MAAIJ,GAAJ,EAAS;AACR,SAAK,MAAMK,IAAX,IAAmBH,MAAnB,EAA2B;AAC1BI,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACG,IAAD,CAAlB;AACA;AACD,GAfkD,CAiBnD;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAO,MAAP;AACA,CAlDD;;AAoDAT,QAAQ,CAACY,SAAT,GAAqB;AACpBV,EAAAA,QAAQ,EAAEH,SAAS,CAACc,MAAV,CAAiBC,UADP;AAEpBX,EAAAA,YAAY,EAAEJ,SAAS,CAACc,MAAV,CAAiBC;AAFX,CAArB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjCd,EAAAA,QAAQ,EAAEc,KAAK,CAACZ,GAAN,CAAUF,QADa;AAEjCC,EAAAA,YAAY,EAAEa,KAAK,CAACX,QAAN,CAAeF;AAFI,CAAL,CAA7B;;AAKA,eAAeL,OAAO,CAACiB,eAAD,CAAP,CAAyBf,QAAzB,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = (props, nycState, gaurdianData) => {\r\n\tlet nyc = props.nycState;\r\n\tconst gaurdian = props.gaurdianData;\r\n\r\n\t// if (nyc) {\r\n\t// nyc.data.results.map(item => {\r\n\t// \tconsole.log(item);\r\n\t// });\r\n\t// }\r\n\tconst nycArr = nyc.data.results;\r\n\r\n\tif (nyc) {\r\n\t\tfor (const item in nycArr) {\r\n\t\t\tconsole.log(nycArr[item]);\r\n\t\t}\r\n\t}\r\n\r\n\t//nyc = nyc.filter(obj => obj);\r\n\r\n\t//console.log(nyc);\r\n\r\n\t// const filter =\r\n\t// \tnyc\r\n\t// \t\t? nyc.data.results.map(item => {\r\n\t// \t\t\t\treturn item;\r\n\t// \t\t  })\r\n\t// \t\t: null;\r\n\t// console.log(filter);\r\n\r\n\t//const filter = nyc.filter(item => item);\r\n\r\n\t// const filteredNyc = nyc.data.results.filter(item => item !== null);\r\n\r\n\t// for (let item in nyc) {\r\n\t// \t//console.log(nyc[item]);\r\n\t// }\r\n\r\n\t// }\r\n\t// return (\r\n\t// \t<ol>\r\n\t// \t\t{nycArr.map}(item => (\r\n\t// \t\t\t<li key={item.url}>{item.url.key}</li>\r\n\t// \t\t))}\r\n\t// \t\t{gaurdianArr.map(item => (\r\n\t// \t\t\t<li>{item.webTitle}</li>\r\n\t// \t\t))}\r\n\t// \t</ol>\r\n\t// );\r\n\r\n\treturn 'data';\r\n};\r\n\r\nDataCard.propTypes = {\r\n\tnycState: PropTypes.object.isRequired,\r\n\tgaurdianData: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\tnycState: state.nyc.nycState,\r\n\tgaurdianData: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}