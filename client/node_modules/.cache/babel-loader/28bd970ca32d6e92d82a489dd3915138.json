{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataView.js\";\nimport React, { useEffect, useState } from 'react'; //import { Link, withRouter } from 'react-router-dom';\n\nimport { getNyc } from '../actions/getNyc';\nimport { getGaurdian } from '../actions/getGaurdian';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DataCard from './DataCard'; // const DataView = ({ getNyc, getGaurdian, nyc }) => {\n// \tuseEffect(() => {\n// \t\tgetNyc();\n// \t\tgetGaurdian();\n// \t}, [getNyc]);\n// \tconst intialState = { nycResults: [] };\n// \tconst [nycResults, setResults] = useState([]);\n// \tconst Update = () => {\n// \t\tconst setResult = (arr, arg) => {\n// \t\t\tarr.push(arg);\n// \t\t};\n// \t};\n// \tif (typeof nyc === undefined) {\n// \t\treturn;\n// \t} else if (nyc.hasOwnProperty('nyc')) {\n// \t\tObject.entries(nyc.nyc).map(([key, value]) => {\n// \t\t\tnycResults.push(value);\n// \t\t});\n// \t}\n// \treturn <DataCard results={nycResults} />;\n// };\n\nconst DataView = ({\n  nyc,\n  gaurdian,\n  getNyc,\n  getGaurdian\n}) => {\n  useEffect(() => {\n    getNyc();\n    getGaurdian();\n  }, [getNyc, getGaurdian]);\n  const nycResults = []; // const [nycResults, setNyc] = useState([intialState])\n\n  useEffect(() => {\n    console.log(nycResults.push('item'));\n  });\n  const [gaurdianResults, setGaurdian] = useState([intialState]);\n\n  const Update = (arr, arg) => {\n    const setNyc = (arr, arg) => {\n      arr.push(arg);\n    };\n  };\n\n  const mapper = (arr, res) => {\n    nameCheck === 'nyc.nyc' ? mapper(nyResults, nyc) : mapper(gaurdianResults, gaurdian);\n    nameCheck = res.hasOwnProperty('nyc') ? 'nyc.nyc' : 'gaurdian';\n    Object.entries({\n      nameCheck\n    }).map(([key, value]) => {\n      Update(arr, value);\n    });\n  };\n\n  mapper(nycResults, nyc);\n  return /*#__PURE__*/React.createElement(DataCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  });\n}; //useEffect(() => {\n// \t\tgetNyc();\n// \t\tgetGaurdian();\n// \t}, [getNyc]);\n// const DataView = ({ props, getNyc, getGaurdian, nyc, gaurdian, props }) => {\n// \tuseEffect(() => {\n// \t\tgetNyc();\n// \t\tgetGaurdian();\n// \t}, [getNyc, getGaurdian]);\n// \tconst [nycResults, setNyc] = useState([]);\n// \tObject.entries(nyc).map(([key, value]) => {\n// \t\tsetNyc(value);\n// \t\tconsole.log('update', nycResults);\n// \t});\n// \treturn <DataCard results={nycResults} />;\n// };\n// const nameCheck = res.hasOwnProperty('nyc') ? 'nyc.nyc' : 'gaurdian';\n// const results =\n// \tnameCheck === 'nyc.nyc'\n// \t\t? mapper(nyResults, nyc)\n// \t\t: mapper(gaurdianResults, gaurdian);\n// filterResults(nycResults, nyc);\n\n\nDataView.propTypes = {\n  getNyc: PropTypes.func.isRequired,\n  getGaurdian: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc,\n  gaurdian: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps, {\n  getNyc,\n  getGaurdian\n})(DataView);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataView.js"],"names":["React","useEffect","useState","getNyc","getGaurdian","connect","PropTypes","DataCard","DataView","nyc","gaurdian","nycResults","console","log","push","gaurdianResults","setGaurdian","intialState","Update","arr","arg","setNyc","mapper","res","nameCheck","nyResults","hasOwnProperty","Object","entries","map","key","value","propTypes","func","isRequired","mapStateToProps","state","gaurdianData"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,QAAP;AAAiBP,EAAAA,MAAjB;AAAyBC,EAAAA;AAAzB,CAAD,KAA4C;AAC5DH,EAAAA,SAAS,CAAC,MAAM;AACfE,IAAAA,MAAM;AACNC,IAAAA,WAAW;AACX,GAHQ,EAGN,CAACD,MAAD,EAASC,WAAT,CAHM,CAAT;AAKA,QAAMO,UAAU,GAAG,EAAnB,CAN4D,CAQ5D;;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACfW,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAU,CAACG,IAAX,CAAgB,MAAhB,CAAZ;AACA,GAFQ,CAAT;AAIA,QAAM,CAACC,eAAD,EAAkBC,WAAlB,IAAiCd,QAAQ,CAAC,CAACe,WAAD,CAAD,CAA/C;;AAEA,QAAMC,MAAM,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5B,UAAMC,MAAM,GAAG,CAACF,GAAD,EAAMC,GAAN,KAAc;AAC5BD,MAAAA,GAAG,CAACL,IAAJ,CAASM,GAAT;AACA,KAFD;AAGA,GAJD;;AAMA,QAAME,MAAM,GAAG,CAACH,GAAD,EAAMI,GAAN,KAAc;AAC5BC,IAAAA,SAAS,KAAK,SAAd,GACGF,MAAM,CAACG,SAAD,EAAYhB,GAAZ,CADT,GAEGa,MAAM,CAACP,eAAD,EAAkBL,QAAlB,CAFT;AAGAc,IAAAA,SAAS,GAAGD,GAAG,CAACG,cAAJ,CAAmB,KAAnB,IAA4B,SAA5B,GAAwC,UAApD;AACAC,IAAAA,MAAM,CAACC,OAAP,CAAe;AAAEJ,MAAAA;AAAF,KAAf,EAA8BK,GAA9B,CAAkC,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AACnDb,MAAAA,MAAM,CAACC,GAAD,EAAMY,KAAN,CAAN;AACA,KAFD;AAGA,GARD;;AAUAT,EAAAA,MAAM,CAACX,UAAD,EAAaF,GAAb,CAAN;AAEA,sBAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACA,CAnCD,C,CAqCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;AAEAD,QAAQ,CAACwB,SAAT,GAAqB;AACpB7B,EAAAA,MAAM,EAAEG,SAAS,CAAC2B,IAAV,CAAeC,UADH;AAEpB9B,EAAAA,WAAW,EAAEE,SAAS,CAAC2B,IAAV,CAAeC;AAFR,CAArB;;AAIA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjC3B,EAAAA,GAAG,EAAE2B,KAAK,CAAC3B,GADsB;AAEjCC,EAAAA,QAAQ,EAAE0B,KAAK,CAAC1B,QAAN,CAAe2B;AAFQ,CAAL,CAA7B;;AAKA,eAAehC,OAAO,CAAC8B,eAAD,EAAkB;AAAEhC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAAkDI,QAAlD,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n//import { Link, withRouter } from 'react-router-dom';\r\nimport { getNyc } from '../actions/getNyc';\r\nimport { getGaurdian } from '../actions/getGaurdian';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DataCard from './DataCard';\r\n\r\n// const DataView = ({ getNyc, getGaurdian, nyc }) => {\r\n// \tuseEffect(() => {\r\n// \t\tgetNyc();\r\n// \t\tgetGaurdian();\r\n// \t}, [getNyc]);\r\n\r\n// \tconst intialState = { nycResults: [] };\r\n\r\n// \tconst [nycResults, setResults] = useState([]);\r\n\r\n// \tconst Update = () => {\r\n// \t\tconst setResult = (arr, arg) => {\r\n// \t\t\tarr.push(arg);\r\n// \t\t};\r\n// \t};\r\n\r\n// \tif (typeof nyc === undefined) {\r\n// \t\treturn;\r\n// \t} else if (nyc.hasOwnProperty('nyc')) {\r\n// \t\tObject.entries(nyc.nyc).map(([key, value]) => {\r\n// \t\t\tnycResults.push(value);\r\n// \t\t});\r\n// \t}\r\n// \treturn <DataCard results={nycResults} />;\r\n// };\r\n\r\nconst DataView = ({ nyc, gaurdian, getNyc, getGaurdian }) => {\r\n\tuseEffect(() => {\r\n\t\tgetNyc();\r\n\t\tgetGaurdian();\r\n\t}, [getNyc, getGaurdian]);\r\n\r\n\tconst nycResults = [];\r\n\r\n\t// const [nycResults, setNyc] = useState([intialState])\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(nycResults.push('item'));\r\n\t});\r\n\r\n\tconst [gaurdianResults, setGaurdian] = useState([intialState]);\r\n\r\n\tconst Update = (arr, arg) => {\r\n\t\tconst setNyc = (arr, arg) => {\r\n\t\t\tarr.push(arg);\r\n\t\t};\r\n\t};\r\n\r\n\tconst mapper = (arr, res) => {\r\n\t\tnameCheck === 'nyc.nyc'\r\n\t\t\t? mapper(nyResults, nyc)\r\n\t\t\t: mapper(gaurdianResults, gaurdian);\r\n\t\tnameCheck = res.hasOwnProperty('nyc') ? 'nyc.nyc' : 'gaurdian';\r\n\t\tObject.entries({ nameCheck }).map(([key, value]) => {\r\n\t\t\tUpdate(arr, value);\r\n\t\t});\r\n\t};\r\n\r\n\tmapper(nycResults, nyc);\r\n\r\n\treturn <DataCard />;\r\n};\r\n\r\n//useEffect(() => {\r\n// \t\tgetNyc();\r\n// \t\tgetGaurdian();\r\n// \t}, [getNyc]);\r\n\r\n// const DataView = ({ props, getNyc, getGaurdian, nyc, gaurdian, props }) => {\r\n// \tuseEffect(() => {\r\n// \t\tgetNyc();\r\n// \t\tgetGaurdian();\r\n// \t}, [getNyc, getGaurdian]);\r\n\r\n// \tconst [nycResults, setNyc] = useState([]);\r\n// \tObject.entries(nyc).map(([key, value]) => {\r\n// \t\tsetNyc(value);\r\n// \t\tconsole.log('update', nycResults);\r\n// \t});\r\n// \treturn <DataCard results={nycResults} />;\r\n// };\r\n\r\n// const nameCheck = res.hasOwnProperty('nyc') ? 'nyc.nyc' : 'gaurdian';\r\n\r\n// const results =\r\n// \tnameCheck === 'nyc.nyc'\r\n// \t\t? mapper(nyResults, nyc)\r\n// \t\t: mapper(gaurdianResults, gaurdian);\r\n\r\n// filterResults(nycResults, nyc);\r\n\r\nDataView.propTypes = {\r\n\tgetNyc: PropTypes.func.isRequired,\r\n\tgetGaurdian: PropTypes.func.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n\tnyc: state.nyc,\r\n\tgaurdian: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps, { getNyc, getGaurdian })(DataView);\r\n"]},"metadata":{},"sourceType":"module"}