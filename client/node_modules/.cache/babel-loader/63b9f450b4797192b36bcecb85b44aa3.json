{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = props => {\n  // const nycData = props.nyc;\n  // console.log(nycData);\n  // for (const item in nyc) {\n  // \tif (item === undefined || null) {\n  // \t\tconsole.log(nyc[item]);\n  // \t\tdelete nyc[item];\n  // \t\tconsole.log(nyc);\n  // \t}\n  // }\n  // // const initialState = {\n  // // \tfilteredNyc: []\n  // // };\n  // //\tconst [filteredNews, setNews] = usestate(initialState);\n  // const nycArr = Object.entries(nycData);\n  // console.log(nycData);\n  // const check = () => {\n  // \tif (nyc) {\n  // \t\tconst results = nyc.data.results;\n  // \t\treturn results;\n  // \t}\n  // };\n  // console.log(check());\n  // check.map(item => {\n  // \tconsole.log(item)\n  // })\n  //results.filter(item => console.log(item.title));\n  // }\n  // console.log(filteredNyc);\n  // filteredNyc.map(item => {\n  // \tconsole.log(item);\n  // });\n  console.log(props.results);\n  props.map(item => console.log(item)); // const listNews = props.results.map(item => <li>{item}</li>);\n  // ReactDOM.render(<ul>{listNews}</ul>, document.getElementById('root'));\n\n  return 'data';\n};\n\nDataCard.propTypes = {\n  nyc: PropTypes.array.isRequired //gaurdianData: PropTypes.object.isRequired\n\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc.nyc //gaurdianData: state.gaurdian.gaurdianData\n\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","useState","useEffect","ReactDOM","connect","PropTypes","DataCard","props","console","log","results","map","item","propTypes","nyc","array","isRequired","mapStateToProps","state"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACzB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AAEAH,EAAAA,KAAK,CAACI,GAAN,CAAUC,IAAI,IAAIJ,OAAO,CAACC,GAAR,CAAYG,IAAZ,CAAlB,EA3CyB,CA6CzB;AAEA;;AACA,SAAO,MAAP;AACA,CAjDD;;AAmDAN,QAAQ,CAACO,SAAT,GAAqB;AACpBC,EAAAA,GAAG,EAAET,SAAS,CAACU,KAAV,CAAgBC,UADD,CAEpB;;AAFoB,CAArB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjCJ,EAAAA,GAAG,EAAEI,KAAK,CAACJ,GAAN,CAAUA,GADkB,CAEjC;;AAFiC,CAAL,CAA7B;;AAKA,eAAeV,OAAO,CAACa,eAAD,CAAP,CAAyBX,QAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = props => {\r\n\t// const nycData = props.nyc;\r\n\t// console.log(nycData);\r\n\r\n\t// for (const item in nyc) {\r\n\t// \tif (item === undefined || null) {\r\n\t// \t\tconsole.log(nyc[item]);\r\n\t// \t\tdelete nyc[item];\r\n\t// \t\tconsole.log(nyc);\r\n\t// \t}\r\n\t// }\r\n\r\n\t// // const initialState = {\r\n\t// // \tfilteredNyc: []\r\n\t// // };\r\n\r\n\t// //\tconst [filteredNews, setNews] = usestate(initialState);\r\n\r\n\t// const nycArr = Object.entries(nycData);\r\n\t// console.log(nycData);\r\n\t// const check = () => {\r\n\t// \tif (nyc) {\r\n\t// \t\tconst results = nyc.data.results;\r\n\t// \t\treturn results;\r\n\t// \t}\r\n\t// };\r\n\r\n\t// console.log(check());\r\n\r\n\t// check.map(item => {\r\n\t// \tconsole.log(item)\r\n\t// })\r\n\t//results.filter(item => console.log(item.title));\r\n\t// }\r\n\r\n\t// console.log(filteredNyc);\r\n\r\n\t// filteredNyc.map(item => {\r\n\t// \tconsole.log(item);\r\n\t// });\r\n\r\n\tconsole.log(props.results);\r\n\r\n\tprops.map(item => console.log(item));\r\n\r\n\t// const listNews = props.results.map(item => <li>{item}</li>);\r\n\r\n\t// ReactDOM.render(<ul>{listNews}</ul>, document.getElementById('root'));\r\n\treturn 'data';\r\n};\r\n\r\nDataCard.propTypes = {\r\n\tnyc: PropTypes.array.isRequired\r\n\t//gaurdianData: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\tnyc: state.nyc.nyc\r\n\t//gaurdianData: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}