{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataView.js\";\nimport React, { useEffect, useState } from 'react'; //import { Link, withRouter } from 'react-router-dom';\n\nimport { getNyc } from '../actions/getNyc';\nimport { getGaurdian } from '../actions/getGaurdian';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DataCard from './DataCard'; // const DataView = ({ getNyc, getGaurdian, nyc }) => {\n// \tuseEffect(() => {\n// \t\tgetNyc();\n// \t\tgetGaurdian();\n// \t}, [getNyc]);\n// \tconst intialState = { nycResults: [] };\n// \tconst [nycResults, setResults] = useState([intialState]);\n// \tconst Update = (arr, arg) => {\n// \t\tconst setResults = (arr, arg) => {\n// \t\t\tarr.push(arg);\n// \t\t};\n// \t};\n// \tif (typeof nyc === undefined) {\n// \t\treturn;\n// \t} else if (nyc.hasOwnProperty('nyc')) {\n// \t\tObject.entries(nyc.nyc).map(([key, value]) => {\n// \t\t\t//console.log(typeof nycResults);\n// \t\t\tUpdate(nycResults.push(value));\n// \t\t});\n// \t}\n// \treturn <DataCard news={nycResults} />;\n// };\n\nconst DataView = ({\n  getNyc,\n  getGaurdian,\n  nyc\n}) => {\n  useEffect(() => {\n    getNyc();\n    getGaurdian();\n  }, [getNyc, getGaurdian]);\n  const nycResults = [];\n\n  const update = (arr, arg) => {\n    arr.push(arg);\n  };\n\n  const objFilter = (arr, res) => {\n    if (arr) {\n      let name = '';\n      const nycCheck = res.hasOwnProperty('nyc') ? name = 'nyc' : name = 'gaurdian';\n\n      const mapper = (arr, arg) => {\n        Object.entries(nyc.nyc).map(([key, value]) => {\n          //console.log(typeof nycResults);\n          update(nycResults, value);\n        });\n      };\n    }\n  }; // \treturn;\n  // } else if (nyc.hasOwnProperty('nyc')) {\n  // \tObject.entries(nyc.nyc).map(([key, value]) => {\n  // \t\t//console.log(typeof nycResults);\n  // \t\tupdate(nycResults, value);\n  // \t});\n  // }\n  // return <DataCard news={nycResults} />;\n  // if (typeof nyc === undefined) {\n  // \treturn;\n  // } else if (nyc.hasOwnProperty('nyc')) {\n  // \tObject.entries(nyc.nyc).map(([key, value]) => {\n  // \t\t//console.log(typeof nycResults);\n  // \t\tupdate(nycResults, value);\n  // \t});\n  // }\n\n\n  objFilter(nycResults, nyc);\n  return /*#__PURE__*/React.createElement(DataCard, {\n    news: nycResults,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  });\n  return 'card';\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc,\n  gaurdian: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps, {\n  getNyc,\n  getGaurdian\n})(DataView);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataView.js"],"names":["React","useEffect","useState","getNyc","getGaurdian","connect","PropTypes","DataCard","DataView","nyc","nycResults","update","arr","arg","push","objFilter","res","name","nycCheck","hasOwnProperty","mapper","Object","entries","map","key","value","mapStateToProps","state","gaurdian","gaurdianData"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEL,EAAAA,MAAF;AAAUC,EAAAA,WAAV;AAAuBK,EAAAA;AAAvB,CAAD,KAAkC;AAClDR,EAAAA,SAAS,CAAC,MAAM;AACfE,IAAAA,MAAM;AACNC,IAAAA,WAAW;AACX,GAHQ,EAGN,CAACD,MAAD,EAASC,WAAT,CAHM,CAAT;AAKA,QAAMM,UAAU,GAAG,EAAnB;;AAEA,QAAMC,MAAM,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5BD,IAAAA,GAAG,CAACE,IAAJ,CAASD,GAAT;AACA,GAFD;;AAIA,QAAME,SAAS,GAAG,CAACH,GAAD,EAAMI,GAAN,KAAc;AAC/B,QAAIJ,GAAJ,EAAS;AACR,UAAIK,IAAI,GAAG,EAAX;AACA,YAAMC,QAAQ,GAAGF,GAAG,CAACG,cAAJ,CAAmB,KAAnB,IACbF,IAAI,GAAG,KADM,GAEbA,IAAI,GAAG,UAFX;;AAIA,YAAMG,MAAM,GAAG,CAACR,GAAD,EAAMC,GAAN,KAAc;AAC5BQ,QAAAA,MAAM,CAACC,OAAP,CAAeb,GAAG,CAACA,GAAnB,EAAwBc,GAAxB,CAA4B,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC7C;AACAd,UAAAA,MAAM,CAACD,UAAD,EAAae,KAAb,CAAN;AACA,SAHD;AAIA,OALD;AAMA;AACD,GAdD,CAZkD,CA4BlD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,EAAAA,SAAS,CAACL,UAAD,EAAaD,GAAb,CAAT;AACA,sBAAO,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACA,SAAO,MAAP;AACA,CAhDD;;AAkDA,MAAMgB,eAAe,GAAGC,KAAK,KAAK;AACjClB,EAAAA,GAAG,EAAEkB,KAAK,CAAClB,GADsB;AAEjCmB,EAAAA,QAAQ,EAAED,KAAK,CAACC,QAAN,CAAeC;AAFQ,CAAL,CAA7B;;AAKA,eAAexB,OAAO,CAACqB,eAAD,EAAkB;AAAEvB,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAAkDI,QAAlD,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n//import { Link, withRouter } from 'react-router-dom';\r\nimport { getNyc } from '../actions/getNyc';\r\nimport { getGaurdian } from '../actions/getGaurdian';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DataCard from './DataCard';\r\n\r\n// const DataView = ({ getNyc, getGaurdian, nyc }) => {\r\n// \tuseEffect(() => {\r\n// \t\tgetNyc();\r\n// \t\tgetGaurdian();\r\n// \t}, [getNyc]);\r\n\r\n// \tconst intialState = { nycResults: [] };\r\n\r\n// \tconst [nycResults, setResults] = useState([intialState]);\r\n\r\n// \tconst Update = (arr, arg) => {\r\n// \t\tconst setResults = (arr, arg) => {\r\n// \t\t\tarr.push(arg);\r\n// \t\t};\r\n// \t};\r\n\r\n// \tif (typeof nyc === undefined) {\r\n// \t\treturn;\r\n// \t} else if (nyc.hasOwnProperty('nyc')) {\r\n// \t\tObject.entries(nyc.nyc).map(([key, value]) => {\r\n// \t\t\t//console.log(typeof nycResults);\r\n// \t\t\tUpdate(nycResults.push(value));\r\n// \t\t});\r\n// \t}\r\n// \treturn <DataCard news={nycResults} />;\r\n// };\r\n\r\nconst DataView = ({ getNyc, getGaurdian, nyc }) => {\r\n\tuseEffect(() => {\r\n\t\tgetNyc();\r\n\t\tgetGaurdian();\r\n\t}, [getNyc, getGaurdian]);\r\n\r\n\tconst nycResults = [];\r\n\r\n\tconst update = (arr, arg) => {\r\n\t\tarr.push(arg);\r\n\t};\r\n\r\n\tconst objFilter = (arr, res) => {\r\n\t\tif (arr) {\r\n\t\t\tlet name = '';\r\n\t\t\tconst nycCheck = res.hasOwnProperty('nyc')\r\n\t\t\t\t? (name = 'nyc')\r\n\t\t\t\t: (name = 'gaurdian');\r\n\r\n\t\t\tconst mapper = (arr, arg) => {\r\n\t\t\t\tObject.entries(nyc.nyc).map(([key, value]) => {\r\n\t\t\t\t\t//console.log(typeof nycResults);\r\n\t\t\t\t\tupdate(nycResults, value);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n\r\n\t// \treturn;\r\n\t// } else if (nyc.hasOwnProperty('nyc')) {\r\n\t// \tObject.entries(nyc.nyc).map(([key, value]) => {\r\n\t// \t\t//console.log(typeof nycResults);\r\n\t// \t\tupdate(nycResults, value);\r\n\t// \t});\r\n\t// }\r\n\t// return <DataCard news={nycResults} />;\r\n\r\n\t// if (typeof nyc === undefined) {\r\n\t// \treturn;\r\n\t// } else if (nyc.hasOwnProperty('nyc')) {\r\n\t// \tObject.entries(nyc.nyc).map(([key, value]) => {\r\n\t// \t\t//console.log(typeof nycResults);\r\n\t// \t\tupdate(nycResults, value);\r\n\t// \t});\r\n\t// }\r\n\tobjFilter(nycResults, nyc);\r\n\treturn <DataCard news={nycResults} />;\r\n\treturn 'card';\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\tnyc: state.nyc,\r\n\tgaurdian: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps, { getNyc, getGaurdian })(DataView);\r\n"]},"metadata":{},"sourceType":"module"}