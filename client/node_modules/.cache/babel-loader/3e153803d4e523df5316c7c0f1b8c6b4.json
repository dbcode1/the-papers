{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport setAuthToken from './utils/setAuthToken';\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware))); // set up a store subscription listener\n// to store the users token in localStorage\n// prevent auth error on first run of subscription\n// let currentState = {\n// \tauth: { token: null, isAuthenticated: null, loading: true, user: null },\n// };\n// store.subscribe(() => {\n// \t// keep track of the previous and current state to compare changes\n// \tlet previousState = currentState;\n// \tcurrentState = store.getState();\n// \t// if the token changes set the value in localStorage and axios headers\n// \t// if (previousState.auth.token !== currentState.auth.token) {\n// \t// \tconst token = currentState.auth.token;\n// \t// \tsetAuthToken(token);\n// \t// }\n// });\n\nexport default store;","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","setAuthToken","initialState","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAG,CAACJ,KAAD,CAAnB;AAEA,MAAMK,KAAK,GAAGR,WAAW,CACxBI,WADwB,EAExBE,YAFwB,EAGxBJ,mBAAmB,CAACD,eAAe,CAAC,GAAGM,UAAJ,CAAhB,CAHK,CAAzB,C,CAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeC,KAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\nimport setAuthToken from './utils/setAuthToken';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n\trootReducer,\r\n\tinitialState,\r\n\tcomposeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\n// set up a store subscription listener\r\n// to store the users token in localStorage\r\n\r\n// prevent auth error on first run of subscription\r\n// let currentState = {\r\n// \tauth: { token: null, isAuthenticated: null, loading: true, user: null },\r\n// };\r\n\r\n// store.subscribe(() => {\r\n// \t// keep track of the previous and current state to compare changes\r\n// \tlet previousState = currentState;\r\n// \tcurrentState = store.getState();\r\n// \t// if the token changes set the value in localStorage and axios headers\r\n// \t// if (previousState.auth.token !== currentState.auth.token) {\r\n// \t// \tconst token = currentState.auth.token;\r\n// \t// \tsetAuthToken(token);\r\n// \t// }\r\n// });\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}