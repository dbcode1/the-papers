{"ast":null,"code":"// import { DATA_SUCCESS, DATA_FAILURE } from './types';\n// import axios from 'axios';\n// import cors from '../utilities/cors';\n// export const getData = () => async dispatch => {\n// \tconst nyt =\n// \t\t'https://api.nytimes.com/svc/topstories/v2/us.json?api-key=vYeKrdCjpgK0YMYXG1yl1VDZ9fhPO7Yu';\n// \tconst gaurdian =\n// \t\t'https://content.guardianapis.com/search?show-fields=thumbnail&q=coronavirus&page-size=100&api-key=3cb25f91-26b8-4f58-833f-873b0478f441';\n// \t//\tcors();\n// \tconst nytReq = await axios.get(nyt);\n// \tconst gaurdianReq = await axios.get(gaurdian);\n// \tconst gaurdianFiltered = gaurdianReq.data.response.results;\n// \tconst nycFiltered = nytReq.data.results;\n// \t// const indexed = gaurdianFiltered.filter(item => {\n// \t// \tconsole.log(item.webTitle);\n// \t// });\n// \tconst allData = [];\n// \tallData.push(nycFiltered);\n// \tallData.push(gaurdianFiltered);\n// \ttry {\n// \t\tdispatch({\n// \t\t\ttype: DATA_SUCCESS,\n// \t\t\tpayload: [nycFiltered, gaurdianFiltered]\n// \t\t});\n// \t} catch (err) {\n// \t\tdispatch({\n// \t\t\ttype: DATA_FAILURE,\n// \t\t\tpayload: {\n// \t\t\t\tmsg: err,\n// \t\t\t\tstatus: err\n// \t\t\t}\n// \t\t});\n// \t}\n// };\nimport { DATA_SUCCESS, DATA_FAILURE } from './types';\nimport axios from 'axios';\nimport cors from '../utilities/cors';\nexport const getGaurdianData = () => async dispatch => {\n  const gaurdian = 'https://content.guardianapis.com/search?show-fields=thumbnail&q=coronavirus&page-size=100&api-key=3cb25f91-26b8-4f58-833f-873b0478f441'; //\tcors();\n\n  const gaurdianReq = await axios.get(gaurdian);\n  const gaurdianFiltered = gaurdianReq.data.response.results; // const indexed = gaurdianFiltered.filter(item => {\n  // \tconsole.log(item.webTitle);\n  // });\n\n  try {\n    dispatch({\n      type: DATA_SUCCESS,\n      payload: gaurdianFiltered\n    });\n  } catch (err) {\n    dispatch({\n      type: DATA_FAILURE,\n      payload: {\n        msg: err,\n        status: err\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/actions/data.js"],"names":["DATA_SUCCESS","DATA_FAILURE","axios","cors","getGaurdianData","dispatch","gaurdian","gaurdianReq","get","gaurdianFiltered","data","response","results","type","payload","err","msg","status"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,YAAT,EAAuBC,YAAvB,QAA2C,SAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM,MAAMC,QAAN,IAAkB;AACtD,QAAMC,QAAQ,GACb,wIADD,CADsD,CAItD;;AACA,QAAMC,WAAW,GAAG,MAAML,KAAK,CAACM,GAAN,CAAUF,QAAV,CAA1B;AAEA,QAAMG,gBAAgB,GAAGF,WAAW,CAACG,IAAZ,CAAiBC,QAAjB,CAA0BC,OAAnD,CAPsD,CAStD;AACA;AACA;;AAEA,MAAI;AACHP,IAAAA,QAAQ,CAAC;AACRQ,MAAAA,IAAI,EAAEb,YADE;AAERc,MAAAA,OAAO,EAAEL;AAFD,KAAD,CAAR;AAIA,GALD,CAKE,OAAOM,GAAP,EAAY;AACbV,IAAAA,QAAQ,CAAC;AACRQ,MAAAA,IAAI,EAAEZ,YADE;AAERa,MAAAA,OAAO,EAAE;AACRE,QAAAA,GAAG,EAAED,GADG;AAERE,QAAAA,MAAM,EAAEF;AAFA;AAFD,KAAD,CAAR;AAOA;AACD,CA3BM","sourcesContent":["// import { DATA_SUCCESS, DATA_FAILURE } from './types';\r\n// import axios from 'axios';\r\n// import cors from '../utilities/cors';\r\n\r\n// export const getData = () => async dispatch => {\r\n// \tconst nyt =\r\n// \t\t'https://api.nytimes.com/svc/topstories/v2/us.json?api-key=vYeKrdCjpgK0YMYXG1yl1VDZ9fhPO7Yu';\r\n// \tconst gaurdian =\r\n// \t\t'https://content.guardianapis.com/search?show-fields=thumbnail&q=coronavirus&page-size=100&api-key=3cb25f91-26b8-4f58-833f-873b0478f441';\r\n\r\n// \t//\tcors();\r\n\r\n// \tconst nytReq = await axios.get(nyt);\r\n// \tconst gaurdianReq = await axios.get(gaurdian);\r\n\r\n// \tconst gaurdianFiltered = gaurdianReq.data.response.results;\r\n// \tconst nycFiltered = nytReq.data.results;\r\n\r\n// \t// const indexed = gaurdianFiltered.filter(item => {\r\n// \t// \tconsole.log(item.webTitle);\r\n// \t// });\r\n\r\n// \tconst allData = [];\r\n\r\n// \tallData.push(nycFiltered);\r\n// \tallData.push(gaurdianFiltered);\r\n\r\n// \ttry {\r\n// \t\tdispatch({\r\n// \t\t\ttype: DATA_SUCCESS,\r\n// \t\t\tpayload: [nycFiltered, gaurdianFiltered]\r\n// \t\t});\r\n// \t} catch (err) {\r\n// \t\tdispatch({\r\n// \t\t\ttype: DATA_FAILURE,\r\n// \t\t\tpayload: {\r\n// \t\t\t\tmsg: err,\r\n// \t\t\t\tstatus: err\r\n// \t\t\t}\r\n// \t\t});\r\n// \t}\r\n// };\r\n\r\nimport { DATA_SUCCESS, DATA_FAILURE } from './types';\r\nimport axios from 'axios';\r\nimport cors from '../utilities/cors';\r\n\r\nexport const getGaurdianData = () => async dispatch => {\r\n\tconst gaurdian =\r\n\t\t'https://content.guardianapis.com/search?show-fields=thumbnail&q=coronavirus&page-size=100&api-key=3cb25f91-26b8-4f58-833f-873b0478f441';\r\n\r\n\t//\tcors();\r\n\tconst gaurdianReq = await axios.get(gaurdian);\r\n\r\n\tconst gaurdianFiltered = gaurdianReq.data.response.results;\r\n\r\n\t// const indexed = gaurdianFiltered.filter(item => {\r\n\t// \tconsole.log(item.webTitle);\r\n\t// });\r\n\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: DATA_SUCCESS,\r\n\t\t\tpayload: gaurdianFiltered\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tdispatch({\r\n\t\t\ttype: DATA_FAILURE,\r\n\t\t\tpayload: {\r\n\t\t\t\tmsg: err,\r\n\t\t\t\tstatus: err\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}