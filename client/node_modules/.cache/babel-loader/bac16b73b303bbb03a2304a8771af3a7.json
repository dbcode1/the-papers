{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataView.js\";\nimport React, { useEffect, useState } from 'react'; //import { Link, withRouter } from 'react-router-dom';\n\nimport { getNyc } from '../actions/getNyc';\nimport { getGaurdian } from '../actions/getGaurdian';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DataCard from './DataCard'; // const DataView = ({ getNyc, getGaurdian, nyc }) => {\n// \tuseEffect(() => {\n// \t\tgetNyc();\n// \t\tgetGaurdian();\n// \t}, [getNyc]);\n// \tconst intialState = { nycResults: [] };\n// \tconst [nycResults, setResults] = useState([]);\n// \tconst Update = () => {\n// \t\tconst setResult = (arr, arg) => {\n// \t\t\tarr.push(arg);\n// \t\t};\n// \t};\n// \tif (typeof nyc === undefined) {\n// \t\treturn;\n// \t} else if (nyc.hasOwnProperty('nyc')) {\n// \t\tObject.entries(nyc.nyc).map(([key, value]) => {\n// \t\t\tnycResults.push(value);\n// \t\t});\n// \t}\n// \treturn <DataCard results={nycResults} />;\n// };\n\nconst DataView = ({\n  state,\n  getNyc,\n  getGaurdian\n}) => {\n  useEffect(() => {\n    getNyc();\n    getGaurdian();\n  }, [getNyc, getGaurdian]);\n  const intialState = {\n    nycResults: []\n  };\n  const [nycResults, setNyc] = useState([intialState]); // useEffect(() => {\n  // \tconsole.log(nycResults.push('item'));\n  // });\n  // const [gaurdianResults, setGaurdian] = useState([intialState]);\n  // const Update = (arr, arg) => {\n  // \tconst setNyc = (arr, arg) => {\n  // \t\tarr.push(arg);\n  // \t};\n  // };\n  // const mapper = (nameCheck, res) => {\n  // \tnameCheck = res.hasOwnProperty('nyc') ? 'nyc.nyc' : 'gaurdian';\n  // \tObject.entries({ nameCheck }).map(([key, value]) => {\n  // \t\tUpdate(nyc, nycResults);\n  // \t});\n  // };\n  // const results =\n  // \tnameCheck === 'nyc.nyc'\n  // \t\t? mapper(nyResults, nyc)\n  // \t\t: mapper(gaurdianResults, gaurdian);\n\n  return /*#__PURE__*/React.createElement(DataCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  });\n}; //useEffect(() => {\n// \t\tgetNyc();\n// \t\tgetGaurdian();\n// \t}, [getNyc]);\n// const DataView = ({ props, getNyc, getGaurdian, nyc, gaurdian, props }) => {\n// \tuseEffect(() => {\n// \t\tgetNyc();\n// \t\tgetGaurdian();\n// \t}, [getNyc, getGaurdian]);\n// \tconst [nycResults, setNyc] = useState([]);\n// \tObject.entries(nyc).map(([key, value]) => {\n// \t\tsetNyc(value);\n// \t\tconsole.log('update', nycResults);\n// \t});\n// \treturn <DataCard results={nycResults} />;\n// };\n// const nameCheck = res.hasOwnProperty('nyc') ? 'nyc.nyc' : 'gaurdian';\n// const results =\n// \tnameCheck === 'nyc.nyc'\n// \t\t? mapper(nyResults, nyc)\n// \t\t: mapper(gaurdianResults, gaurdian);\n// filterResults(nycResults, nyc);\n\n\nDataView.propTypes = {\n  getNyc: PropTypes.func.isRequired,\n  getGaurdian: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc,\n  gaurdian: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps, {\n  getNyc,\n  getGaurdian\n})(DataView);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataView.js"],"names":["React","useEffect","useState","getNyc","getGaurdian","connect","PropTypes","DataCard","DataView","state","intialState","nycResults","setNyc","propTypes","func","isRequired","mapStateToProps","nyc","gaurdian","gaurdianData"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASN,EAAAA,MAAT;AAAiBC,EAAAA;AAAjB,CAAD,KAAoC;AACpDH,EAAAA,SAAS,CAAC,MAAM;AACfE,IAAAA,MAAM;AACNC,IAAAA,WAAW;AACX,GAHQ,EAGN,CAACD,MAAD,EAASC,WAAT,CAHM,CAAT;AAKA,QAAMM,WAAW,GAAG;AAAEC,IAAAA,UAAU,EAAE;AAAd,GAApB;AAEA,QAAM,CAACA,UAAD,EAAaC,MAAb,IAAuBV,QAAQ,CAAC,CAACQ,WAAD,CAAD,CAArC,CARoD,CAUpD;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,sBAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACA,CAnCD,C,CAqCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;AAEAF,QAAQ,CAACK,SAAT,GAAqB;AACpBV,EAAAA,MAAM,EAAEG,SAAS,CAACQ,IAAV,CAAeC,UADH;AAEpBX,EAAAA,WAAW,EAAEE,SAAS,CAACQ,IAAV,CAAeC;AAFR,CAArB;;AAIA,MAAMC,eAAe,GAAGP,KAAK,KAAK;AACjCQ,EAAAA,GAAG,EAAER,KAAK,CAACQ,GADsB;AAEjCC,EAAAA,QAAQ,EAAET,KAAK,CAACS,QAAN,CAAeC;AAFQ,CAAL,CAA7B;;AAKA,eAAed,OAAO,CAACW,eAAD,EAAkB;AAAEb,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAAkDI,QAAlD,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n//import { Link, withRouter } from 'react-router-dom';\r\nimport { getNyc } from '../actions/getNyc';\r\nimport { getGaurdian } from '../actions/getGaurdian';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DataCard from './DataCard';\r\n\r\n// const DataView = ({ getNyc, getGaurdian, nyc }) => {\r\n// \tuseEffect(() => {\r\n// \t\tgetNyc();\r\n// \t\tgetGaurdian();\r\n// \t}, [getNyc]);\r\n\r\n// \tconst intialState = { nycResults: [] };\r\n\r\n// \tconst [nycResults, setResults] = useState([]);\r\n\r\n// \tconst Update = () => {\r\n// \t\tconst setResult = (arr, arg) => {\r\n// \t\t\tarr.push(arg);\r\n// \t\t};\r\n// \t};\r\n\r\n// \tif (typeof nyc === undefined) {\r\n// \t\treturn;\r\n// \t} else if (nyc.hasOwnProperty('nyc')) {\r\n// \t\tObject.entries(nyc.nyc).map(([key, value]) => {\r\n// \t\t\tnycResults.push(value);\r\n// \t\t});\r\n// \t}\r\n// \treturn <DataCard results={nycResults} />;\r\n// };\r\n\r\nconst DataView = ({ state, getNyc, getGaurdian }) => {\r\n\tuseEffect(() => {\r\n\t\tgetNyc();\r\n\t\tgetGaurdian();\r\n\t}, [getNyc, getGaurdian]);\r\n\r\n\tconst intialState = { nycResults: [] };\r\n\r\n\tconst [nycResults, setNyc] = useState([intialState]);\r\n\r\n\t// useEffect(() => {\r\n\t// \tconsole.log(nycResults.push('item'));\r\n\t// });\r\n\r\n\t// const [gaurdianResults, setGaurdian] = useState([intialState]);\r\n\r\n\t// const Update = (arr, arg) => {\r\n\t// \tconst setNyc = (arr, arg) => {\r\n\t// \t\tarr.push(arg);\r\n\t// \t};\r\n\t// };\r\n\r\n\t// const mapper = (nameCheck, res) => {\r\n\t// \tnameCheck = res.hasOwnProperty('nyc') ? 'nyc.nyc' : 'gaurdian';\r\n\t// \tObject.entries({ nameCheck }).map(([key, value]) => {\r\n\t// \t\tUpdate(nyc, nycResults);\r\n\t// \t});\r\n\t// };\r\n\r\n\t// const results =\r\n\t// \tnameCheck === 'nyc.nyc'\r\n\t// \t\t? mapper(nyResults, nyc)\r\n\t// \t\t: mapper(gaurdianResults, gaurdian);\r\n\r\n\treturn <DataCard />;\r\n};\r\n\r\n//useEffect(() => {\r\n// \t\tgetNyc();\r\n// \t\tgetGaurdian();\r\n// \t}, [getNyc]);\r\n\r\n// const DataView = ({ props, getNyc, getGaurdian, nyc, gaurdian, props }) => {\r\n// \tuseEffect(() => {\r\n// \t\tgetNyc();\r\n// \t\tgetGaurdian();\r\n// \t}, [getNyc, getGaurdian]);\r\n\r\n// \tconst [nycResults, setNyc] = useState([]);\r\n// \tObject.entries(nyc).map(([key, value]) => {\r\n// \t\tsetNyc(value);\r\n// \t\tconsole.log('update', nycResults);\r\n// \t});\r\n// \treturn <DataCard results={nycResults} />;\r\n// };\r\n\r\n// const nameCheck = res.hasOwnProperty('nyc') ? 'nyc.nyc' : 'gaurdian';\r\n\r\n// const results =\r\n// \tnameCheck === 'nyc.nyc'\r\n// \t\t? mapper(nyResults, nyc)\r\n// \t\t: mapper(gaurdianResults, gaurdian);\r\n\r\n// filterResults(nycResults, nyc);\r\n\r\nDataView.propTypes = {\r\n\tgetNyc: PropTypes.func.isRequired,\r\n\tgetGaurdian: PropTypes.func.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n\tnyc: state.nyc,\r\n\tgaurdian: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps, { getNyc, getGaurdian })(DataView);\r\n"]},"metadata":{},"sourceType":"module"}