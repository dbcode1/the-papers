{"ast":null,"code":"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = (props, nycState, gaurdianData) => {\n  const nyc = props.nycState;\n  const gaurdian = props.gaurdianData;\n  const filteredNyc = [];\n  const filteredGaurdian = []; // const nycLoop = () => {\n  // \tfor (const item in nyc) {\n  // \t\treturn nyc[item];\n  // \t}\n  // };\n\n  const nycLoop = () => {\n    for (const item in nyc) {\n      return nyc[item];\n    }\n  };\n\n  const nycClean = nycLoop();\n  console.log(Object.entries(nycClean)); // const initialState = {\n  // \tfilteredNyc: []\n  // };\n  //\tconst [filteredNews, setNews] = usestate(initialState);\n  // if (nyc) {\n  // \tconst results = nyc.data.results;\n  // \tresults.map(item => {\n  // \t\treturn item.title;\n  // \t});\n  //results.filter(item => console.log(item.title));\n  // }\n  // console.log(filteredNyc);\n  // filteredNyc.map(item => {\n  // \tconsole.log(item);\n  // });\n\n  return 'data';\n};\n\nDataCard.propTypes = {\n  nycState: PropTypes.object.isRequired,\n  gaurdianData: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  nycState: state.nyc.nycState,\n  gaurdianData: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","useState","connect","PropTypes","DataCard","props","nycState","gaurdianData","nyc","gaurdian","filteredNyc","filteredGaurdian","nycLoop","item","nycClean","console","log","Object","entries","propTypes","object","isRequired","mapStateToProps","state"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,YAAlB,KAAmC;AACnD,QAAMC,GAAG,GAAGH,KAAK,CAACC,QAAlB;AACA,QAAMG,QAAQ,GAAGJ,KAAK,CAACE,YAAvB;AACA,QAAMG,WAAW,GAAG,EAApB;AACA,QAAMC,gBAAgB,GAAG,EAAzB,CAJmD,CAMnD;AACA;AACA;AACA;AACA;;AAEA,QAAMC,OAAO,GAAG,MAAM;AACrB,SAAK,MAAMC,IAAX,IAAmBL,GAAnB,EAAwB;AACvB,aAAOA,GAAG,CAACK,IAAD,CAAV;AACA;AACD,GAJD;;AAMA,QAAMC,QAAQ,GAAGF,OAAO,EAAxB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAP,CAAeJ,QAAf,CAAZ,EAnBmD,CAqBnD;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;AACA,SAAO,MAAP;AACA,CA1CD;;AA4CAV,QAAQ,CAACe,SAAT,GAAqB;AACpBb,EAAAA,QAAQ,EAAEH,SAAS,CAACiB,MAAV,CAAiBC,UADP;AAEpBd,EAAAA,YAAY,EAAEJ,SAAS,CAACiB,MAAV,CAAiBC;AAFX,CAArB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjCjB,EAAAA,QAAQ,EAAEiB,KAAK,CAACf,GAAN,CAAUF,QADa;AAEjCC,EAAAA,YAAY,EAAEgB,KAAK,CAACd,QAAN,CAAeF;AAFI,CAAL,CAA7B;;AAKA,eAAeL,OAAO,CAACoB,eAAD,CAAP,CAAyBlB,QAAzB,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = (props, nycState, gaurdianData) => {\r\n\tconst nyc = props.nycState;\r\n\tconst gaurdian = props.gaurdianData;\r\n\tconst filteredNyc = [];\r\n\tconst filteredGaurdian = [];\r\n\r\n\t// const nycLoop = () => {\r\n\t// \tfor (const item in nyc) {\r\n\t// \t\treturn nyc[item];\r\n\t// \t}\r\n\t// };\r\n\r\n\tconst nycLoop = () => {\r\n\t\tfor (const item in nyc) {\r\n\t\t\treturn nyc[item];\r\n\t\t}\r\n\t};\r\n\r\n\tconst nycClean = nycLoop();\r\n\tconsole.log(Object.entries(nycClean));\r\n\r\n\t// const initialState = {\r\n\t// \tfilteredNyc: []\r\n\t// };\r\n\r\n\t//\tconst [filteredNews, setNews] = usestate(initialState);\r\n\r\n\t// if (nyc) {\r\n\t// \tconst results = nyc.data.results;\r\n\t// \tresults.map(item => {\r\n\t// \t\treturn item.title;\r\n\t// \t});\r\n\r\n\t//results.filter(item => console.log(item.title));\r\n\t// }\r\n\r\n\t// console.log(filteredNyc);\r\n\r\n\t// filteredNyc.map(item => {\r\n\t// \tconsole.log(item);\r\n\t// });\r\n\treturn 'data';\r\n};\r\n\r\nDataCard.propTypes = {\r\n\tnycState: PropTypes.object.isRequired,\r\n\tgaurdianData: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\tnycState: state.nyc.nycState,\r\n\tgaurdianData: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}