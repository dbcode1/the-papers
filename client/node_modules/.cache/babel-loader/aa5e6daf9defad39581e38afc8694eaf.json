{"ast":null,"code":"import { GAURDIAN_DATA_SUCCESS, DATA_FAILURE } from './types';\nimport axios from 'axios';\nimport cors from '../utilities/cors';\nexport const getGaurdian = () => async dispatch => {\n  const gaurdian = 'https://content.guardianapis.com/search?show-fields=thumbnail&q=coronavirus&page-size=100&api-key=3cb25f91-26b8-4f58-833f-873b0478f441'; //\tcors();\n\n  const gaurdianReq = await axios.get(gaurdian);\n  const gaurdianFiltered = gaurdianReq.data.response.results; // try {\n  // \tif (true) {\n  // \t}\n  // \tdispatch({\n  // \t\ttype: GAURDIAN_DATA_SUCCESS,\n  // \t\tpayload: gaurdianFiltered\n  // \t});\n  // } catch (err) {\n  // \tdispatch({\n  // \t\ttype: DATA_FAILURE,\n  // \t\tpayload: {\n  // \t\t\tmsg: err,\n  // \t\t\tstatus: err\n  // \t\t}\n  // \t});\n  // }\n\n  try {\n    const gaurdianReq = await axios.get(nyt);\n    console.log(gaurdianReq.data);\n\n    if (!nytReq.data.status == 'OK') {\n      throw new Error(`${nytReq.status} ${nytReq.statusText}`);\n    }\n\n    const nycData = await nytReq.data.results;\n    dispatch({\n      type: NYC_DATA_SUCCESS,\n      payload: nycData\n    });\n  } catch (err) {\n    dispatch({\n      type: DATA_FAILURE,\n      payload: {\n        msg: err,\n        status: err\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/actions/getGaurdian.js"],"names":["GAURDIAN_DATA_SUCCESS","DATA_FAILURE","axios","cors","getGaurdian","dispatch","gaurdian","gaurdianReq","get","gaurdianFiltered","data","response","results","nyt","console","log","nytReq","status","Error","statusText","nycData","type","NYC_DATA_SUCCESS","payload","err","msg"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,YAAhC,QAAoD,SAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAClD,QAAMC,QAAQ,GACb,wIADD,CADkD,CAIlD;;AACA,QAAMC,WAAW,GAAG,MAAML,KAAK,CAACM,GAAN,CAAUF,QAAV,CAA1B;AAEA,QAAMG,gBAAgB,GAAGF,WAAW,CAACG,IAAZ,CAAiBC,QAAjB,CAA0BC,OAAnD,CAPkD,CASlD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAI;AACH,UAAML,WAAW,GAAG,MAAML,KAAK,CAACM,GAAN,CAAUK,GAAV,CAA1B;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYR,WAAW,CAACG,IAAxB;;AACA,QAAI,CAACM,MAAM,CAACN,IAAP,CAAYO,MAAb,IAAuB,IAA3B,EAAiC;AAChC,YAAM,IAAIC,KAAJ,CAAW,GAAEF,MAAM,CAACC,MAAO,IAAGD,MAAM,CAACG,UAAW,EAAhD,CAAN;AACA;;AAED,UAAMC,OAAO,GAAG,MAAMJ,MAAM,CAACN,IAAP,CAAYE,OAAlC;AAEAP,IAAAA,QAAQ,CAAC;AACRgB,MAAAA,IAAI,EAAEC,gBADE;AAERC,MAAAA,OAAO,EAAEH;AAFD,KAAD,CAAR;AAIA,GAdD,CAcE,OAAOI,GAAP,EAAY;AACbnB,IAAAA,QAAQ,CAAC;AACRgB,MAAAA,IAAI,EAAEpB,YADE;AAERsB,MAAAA,OAAO,EAAE;AACRE,QAAAA,GAAG,EAAED,GADG;AAERP,QAAAA,MAAM,EAAEO;AAFA;AAFD,KAAD,CAAR;AAOA;AACD,CAlDM","sourcesContent":["import { GAURDIAN_DATA_SUCCESS, DATA_FAILURE } from './types';\r\nimport axios from 'axios';\r\nimport cors from '../utilities/cors';\r\n\r\nexport const getGaurdian = () => async dispatch => {\r\n\tconst gaurdian =\r\n\t\t'https://content.guardianapis.com/search?show-fields=thumbnail&q=coronavirus&page-size=100&api-key=3cb25f91-26b8-4f58-833f-873b0478f441';\r\n\r\n\t//\tcors();\r\n\tconst gaurdianReq = await axios.get(gaurdian);\r\n\r\n\tconst gaurdianFiltered = gaurdianReq.data.response.results;\r\n\r\n\t// try {\r\n\t// \tif (true) {\r\n\t// \t}\r\n\r\n\t// \tdispatch({\r\n\t// \t\ttype: GAURDIAN_DATA_SUCCESS,\r\n\t// \t\tpayload: gaurdianFiltered\r\n\t// \t});\r\n\t// } catch (err) {\r\n\t// \tdispatch({\r\n\t// \t\ttype: DATA_FAILURE,\r\n\t// \t\tpayload: {\r\n\t// \t\t\tmsg: err,\r\n\t// \t\t\tstatus: err\r\n\t// \t\t}\r\n\t// \t});\r\n\t// }\r\n\r\n\ttry {\r\n\t\tconst gaurdianReq = await axios.get(nyt);\r\n\r\n\t\tconsole.log(gaurdianReq.data);\r\n\t\tif (!nytReq.data.status == 'OK') {\r\n\t\t\tthrow new Error(`${nytReq.status} ${nytReq.statusText}`);\r\n\t\t}\r\n\r\n\t\tconst nycData = await nytReq.data.results;\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: NYC_DATA_SUCCESS,\r\n\t\t\tpayload: nycData\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tdispatch({\r\n\t\t\ttype: DATA_FAILURE,\r\n\t\t\tpayload: {\r\n\t\t\t\tmsg: err,\r\n\t\t\t\tstatus: err\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}