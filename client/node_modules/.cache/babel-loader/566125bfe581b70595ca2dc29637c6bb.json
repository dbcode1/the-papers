{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataView.js\";\nimport React, { useEffect, useState } from 'react'; //import { Link, withRouter } from 'react-router-dom';\n\nimport { getNyc } from '../actions/getNyc';\nimport { getGaurdian } from '../actions/getGaurdian';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DataCard from './DataCard';\nimport { empty } from '../utilities/empty';\n\nconst DataView = ({\n  getNyc,\n  getGaurdian,\n  nyc\n}) => {\n  useEffect(() => {\n    getNyc(); //getGaurdian();\n  }, []);\n  const intialState = {\n    results: []\n  };\n  const [results, setResults] = useState([]); // const setResult = (arr, arg) => {\n  // \tarr.push(arg);\n  // };\n\n  if (typeof nyc === undefined) {\n    return;\n  } else if (nyc.hasOwnProperty('nyc')) {\n    Object.entries(nyc.nyc).map(([key, value]) => {\n      setResults(results.concat(value));\n    });\n  }\n\n  console.log(results); // Object.entries(nyc.nyc).map(item => {\n  // \tconsole.log(item);\n  // });\n  // if (nyc) {\n  // Object.entries(nyc.nyc).map(item => {\n  // \tconsole.log(item);\n  // });\n  // }\n\n  return /*#__PURE__*/React.createElement(DataCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  });\n};\n\nDataView.propTypes = {\n  getNyc: PropTypes.func.isRequired,\n  getGaurdian: PropTypes.func.isRequired,\n  nyc: PropTypes.object.isRequired //gaurdianData: PropTypes.object.isRequired\n\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc //: state.gaurdian.gaurdianData\n\n});\n\nexport default connect(mapStateToProps, {\n  getNyc,\n  getGaurdian\n})(DataView);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataView.js"],"names":["React","useEffect","useState","getNyc","getGaurdian","connect","PropTypes","DataCard","empty","DataView","nyc","intialState","results","setResults","undefined","hasOwnProperty","Object","entries","map","key","value","concat","console","log","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,KAAT,QAAsB,oBAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEN,EAAAA,MAAF;AAAUC,EAAAA,WAAV;AAAuBM,EAAAA;AAAvB,CAAD,KAAkC;AAClDT,EAAAA,SAAS,CAAC,MAAM;AACfE,IAAAA,MAAM,GADS,CAEf;AACA,GAHQ,EAGN,EAHM,CAAT;AAKA,QAAMQ,WAAW,GAAG;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAApB;AAEA,QAAM,CAACA,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC,CARkD,CAUlD;AACA;AACA;;AAEA,MAAI,OAAOQ,GAAP,KAAeI,SAAnB,EAA8B;AAC7B;AACA,GAFD,MAEO,IAAIJ,GAAG,CAACK,cAAJ,CAAmB,KAAnB,CAAJ,EAA+B;AACrCC,IAAAA,MAAM,CAACC,OAAP,CAAeP,GAAG,CAACA,GAAnB,EAAwBQ,GAAxB,CAA4B,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC7CP,MAAAA,UAAU,CAACD,OAAO,CAACS,MAAR,CAAeD,KAAf,CAAD,CAAV;AACA,KAFD;AAGA;;AAEDE,EAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ,EAtBkD,CAuBlD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,sBAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACA,CAlCD;;AAoCAH,QAAQ,CAACe,SAAT,GAAqB;AACpBrB,EAAAA,MAAM,EAAEG,SAAS,CAACmB,IAAV,CAAeC,UADH;AAEpBtB,EAAAA,WAAW,EAAEE,SAAS,CAACmB,IAAV,CAAeC,UAFR;AAGpBhB,EAAAA,GAAG,EAAEJ,SAAS,CAACqB,MAAV,CAAiBD,UAHF,CAIpB;;AAJoB,CAArB;;AAMA,MAAME,eAAe,GAAGC,KAAK,KAAK;AACjCnB,EAAAA,GAAG,EAAEmB,KAAK,CAACnB,GADsB,CAEjC;;AAFiC,CAAL,CAA7B;;AAKA,eAAeL,OAAO,CAACuB,eAAD,EAAkB;AAAEzB,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAAkDK,QAAlD,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n//import { Link, withRouter } from 'react-router-dom';\r\nimport { getNyc } from '../actions/getNyc';\r\nimport { getGaurdian } from '../actions/getGaurdian';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DataCard from './DataCard';\r\nimport { empty } from '../utilities/empty';\r\n\r\nconst DataView = ({ getNyc, getGaurdian, nyc }) => {\r\n\tuseEffect(() => {\r\n\t\tgetNyc();\r\n\t\t//getGaurdian();\r\n\t}, []);\r\n\r\n\tconst intialState = { results: [] };\r\n\r\n\tconst [results, setResults] = useState([]);\r\n\r\n\t// const setResult = (arr, arg) => {\r\n\t// \tarr.push(arg);\r\n\t// };\r\n\r\n\tif (typeof nyc === undefined) {\r\n\t\treturn;\r\n\t} else if (nyc.hasOwnProperty('nyc')) {\r\n\t\tObject.entries(nyc.nyc).map(([key, value]) => {\r\n\t\t\tsetResults(results.concat(value));\r\n\t\t});\r\n\t}\r\n\r\n\tconsole.log(results);\r\n\t// Object.entries(nyc.nyc).map(item => {\r\n\t// \tconsole.log(item);\r\n\t// });\r\n\r\n\t// if (nyc) {\r\n\t// Object.entries(nyc.nyc).map(item => {\r\n\t// \tconsole.log(item);\r\n\t// });\r\n\t// }\r\n\r\n\treturn <DataCard />;\r\n};\r\n\r\nDataView.propTypes = {\r\n\tgetNyc: PropTypes.func.isRequired,\r\n\tgetGaurdian: PropTypes.func.isRequired,\r\n\tnyc: PropTypes.object.isRequired\r\n\t//gaurdianData: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n\tnyc: state.nyc\r\n\t//: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps, { getNyc, getGaurdian })(DataView);\r\n"]},"metadata":{},"sourceType":"module"}