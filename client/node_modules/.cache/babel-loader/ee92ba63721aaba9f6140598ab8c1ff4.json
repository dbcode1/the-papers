{"ast":null,"code":"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = (props, nycState, gaurdianData) => {\n  const nyc = props.nycState;\n  const gaurdian = props.gaurdianData; // if (nyc) {\n  // \tnyc.data.results.map(item => {\n  // \t\tconsole.log(item);\n  // \t});\n  // }\n\n  console.log(nyc);\n  const filter = nyc ? nyc : null;\n  filter.data.results.map(item => {\n    console.log(item);\n  }); //const filter = nyc.filter(item => item);\n  // const filteredNyc = nyc.data.results.filter(item => item !== null);\n  // for (let item in nyc) {\n  // \t//console.log(nyc[item]);\n  // }\n  // }\n  // return (\n  // \t<ol>\n  // \t\t{nycArr.map}(item => (\n  // \t\t\t<li key={item.url}>{item.url.key}</li>\n  // \t\t))}\n  // \t\t{gaurdianArr.map(item => (\n  // \t\t\t<li>{item.webTitle}</li>\n  // \t\t))}\n  // \t</ol>\n  // );\n\n  return 'data';\n};\n\nDataCard.propTypes = {\n  nycState: PropTypes.object.isRequired,\n  gaurdianData: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  nycState: state.nyc.nycState,\n  gaurdianData: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","useState","connect","PropTypes","DataCard","props","nycState","gaurdianData","nyc","gaurdian","console","log","filter","data","results","map","item","propTypes","object","isRequired","mapStateToProps","state"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,YAAlB,KAAmC;AACnD,QAAMC,GAAG,GAAGH,KAAK,CAACC,QAAlB;AACA,QAAMG,QAAQ,GAAGJ,KAAK,CAACE,YAAvB,CAFmD,CAInD;AACA;AACA;AACA;AACA;;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,QAAMI,MAAM,GAAGJ,GAAG,GAAGA,GAAH,GAAS,IAA3B;AACAI,EAAAA,MAAM,CAACC,IAAP,CAAYC,OAAZ,CAAoBC,GAApB,CAAwBC,IAAI,IAAI;AAC/BN,IAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACA,GAFD,EAXmD,CAcnD;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAO,MAAP;AACA,CAnCD;;AAqCAZ,QAAQ,CAACa,SAAT,GAAqB;AACpBX,EAAAA,QAAQ,EAAEH,SAAS,CAACe,MAAV,CAAiBC,UADP;AAEpBZ,EAAAA,YAAY,EAAEJ,SAAS,CAACe,MAAV,CAAiBC;AAFX,CAArB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjCf,EAAAA,QAAQ,EAAEe,KAAK,CAACb,GAAN,CAAUF,QADa;AAEjCC,EAAAA,YAAY,EAAEc,KAAK,CAACZ,QAAN,CAAeF;AAFI,CAAL,CAA7B;;AAKA,eAAeL,OAAO,CAACkB,eAAD,CAAP,CAAyBhB,QAAzB,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = (props, nycState, gaurdianData) => {\r\n\tconst nyc = props.nycState;\r\n\tconst gaurdian = props.gaurdianData;\r\n\r\n\t// if (nyc) {\r\n\t// \tnyc.data.results.map(item => {\r\n\t// \t\tconsole.log(item);\r\n\t// \t});\r\n\t// }\r\n\tconsole.log(nyc);\r\n\tconst filter = nyc ? nyc : null;\r\n\tfilter.data.results.map(item => {\r\n\t\tconsole.log(item);\r\n\t});\r\n\t//const filter = nyc.filter(item => item);\r\n\r\n\t// const filteredNyc = nyc.data.results.filter(item => item !== null);\r\n\r\n\t// for (let item in nyc) {\r\n\t// \t//console.log(nyc[item]);\r\n\t// }\r\n\r\n\t// }\r\n\t// return (\r\n\t// \t<ol>\r\n\t// \t\t{nycArr.map}(item => (\r\n\t// \t\t\t<li key={item.url}>{item.url.key}</li>\r\n\t// \t\t))}\r\n\t// \t\t{gaurdianArr.map(item => (\r\n\t// \t\t\t<li>{item.webTitle}</li>\r\n\t// \t\t))}\r\n\t// \t</ol>\r\n\t// );\r\n\r\n\treturn 'data';\r\n};\r\n\r\nDataCard.propTypes = {\r\n\tnycState: PropTypes.object.isRequired,\r\n\tgaurdianData: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\tnycState: state.nyc.nycState,\r\n\tgaurdianData: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}