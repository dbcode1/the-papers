{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataView.js\";\nimport React, { useEffect, useState } from 'react'; //import { Link, withRouter } from 'react-router-dom';\n\nimport { getNyc } from '../actions/getNyc';\nimport { getGaurdian } from '../actions/getGaurdian';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DataCard from './DataCard'; // const DataView = ({ getNyc, getGaurdian, nyc }) => {\n// \tuseEffect(() => {\n// \t\tgetNyc();\n// \t\tgetGaurdian();\n// \t}, [getNyc]);\n// \tconst intialState = { nycResults: [] };\n// \tconst [nycResults, setResults] = useState([]);\n// \tconst setResult = (arr, arg) => {\n// \t\tarr.push(arg);\n// \t};\n// \tif (typeof nyc === undefined) {\n// \t\treturn;\n// \t} else if (nyc.hasOwnProperty('nyc')) {\n// \t\tObject.entries(nyc.nyc).map(([key, value]) => {\n// \t\t\tnycResults.push(value);\n// \t\t});\n// \t}\n// \treturn <DataCard results={nycResults} />;\n// };\n\nconst DataView = ({\n  getNyc,\n  getGaurdian,\n  nyc,\n  gaurdian\n}) => {\n  useEffect(() => {\n    getNyc();\n    getGaurdian();\n  }, [getNyc, getGaurdian]);\n  const intialState = {\n    nycResults: [],\n    gaurdianData: []\n  };\n  const [nycResults, setNyc] = useState(['item']);\n  console.log(nycResults);\n\n  const update = () => {\n    () => {\n      return setNyc(nycResults = 'item');\n    }; // pass results to state containers\n    //setNyc(nycResults.push('item'));\n\n  };\n\n  console.log(update()); // //function to map\n  // const mapper = (arr, res) => {\n  // \tconsole.log(res);\n  // \tObject.entries(res).map(([key, value]) => {\n  // \t\t{\n  // \t\t\tpusher(nycResults, value);\n  // \t\t\t//console.log('update', nycResults);\n  // \t\t}\n  // \t});\n  // \treturn arr;\n  // };\n  // //create a function to filterResults\n  // const filterResults = (arr, res, state) => {\n  // \tconst nameCheck = res.hasOwnProperty('nyc') ? 'nyc.nyc' : 'gaurdian';\n  // \t// const results =\n  // \t// \tnameCheck === 'nyc.nyc'\n  // \t// \t\t? mapper(nyResults, nyc)\n  // \t// \t\t: mapper(gaurdianResults, gaurdian);\n  // \t//return results;\n  // };\n  // filterResults(nycResults, nyc);\n\n  return /*#__PURE__*/React.createElement(DataCard, {\n    results: nycResults,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  });\n};\n\nDataView.propTypes = {\n  getNyc: PropTypes.func.isRequired,\n  getGaurdian: PropTypes.func.isRequired,\n  nyc: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc,\n  gaurdian: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps, {\n  getNyc,\n  getGaurdian\n})(DataView);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataView.js"],"names":["React","useEffect","useState","getNyc","getGaurdian","connect","PropTypes","DataCard","DataView","nyc","gaurdian","intialState","nycResults","gaurdianData","setNyc","console","log","update","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEL,EAAAA,MAAF;AAAUC,EAAAA,WAAV;AAAuBK,EAAAA,GAAvB;AAA4BC,EAAAA;AAA5B,CAAD,KAA4C;AAC5DT,EAAAA,SAAS,CAAC,MAAM;AACfE,IAAAA,MAAM;AACNC,IAAAA,WAAW;AACX,GAHQ,EAGN,CAACD,MAAD,EAASC,WAAT,CAHM,CAAT;AAKA,QAAMO,WAAW,GAAG;AAAEC,IAAAA,UAAU,EAAE,EAAd;AAAkBC,IAAAA,YAAY,EAAE;AAAhC,GAApB;AAEA,QAAM,CAACD,UAAD,EAAaE,MAAb,IAAuBZ,QAAQ,CAAC,CAAC,MAAD,CAAD,CAArC;AAEAa,EAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;;AAEA,QAAMK,MAAM,GAAG,MAAM;AACpB,UAAM;AACL,aAAOH,MAAM,CAAEF,UAAU,GAAG,MAAf,CAAb;AACA,KAFD,CADoB,CAKpB;AACA;;AACA,GAPD;;AASAG,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,EAAlB,EArB4D,CAuB5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA,sBAAO,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAEL,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACA,CAlDD;;AAoDAJ,QAAQ,CAACU,SAAT,GAAqB;AACpBf,EAAAA,MAAM,EAAEG,SAAS,CAACa,IAAV,CAAeC,UADH;AAEpBhB,EAAAA,WAAW,EAAEE,SAAS,CAACa,IAAV,CAAeC,UAFR;AAGpBX,EAAAA,GAAG,EAAEH,SAAS,CAACe,MAAV,CAAiBD;AAHF,CAArB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AACjCd,EAAAA,GAAG,EAAEc,KAAK,CAACd,GADsB;AAEjCC,EAAAA,QAAQ,EAAEa,KAAK,CAACb,QAAN,CAAeG;AAFQ,CAAL,CAA7B;;AAKA,eAAeR,OAAO,CAACiB,eAAD,EAAkB;AAAEnB,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAAkDI,QAAlD,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n//import { Link, withRouter } from 'react-router-dom';\r\nimport { getNyc } from '../actions/getNyc';\r\nimport { getGaurdian } from '../actions/getGaurdian';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DataCard from './DataCard';\r\n\r\n// const DataView = ({ getNyc, getGaurdian, nyc }) => {\r\n// \tuseEffect(() => {\r\n// \t\tgetNyc();\r\n// \t\tgetGaurdian();\r\n// \t}, [getNyc]);\r\n\r\n// \tconst intialState = { nycResults: [] };\r\n\r\n// \tconst [nycResults, setResults] = useState([]);\r\n\r\n// \tconst setResult = (arr, arg) => {\r\n// \t\tarr.push(arg);\r\n// \t};\r\n\r\n// \tif (typeof nyc === undefined) {\r\n// \t\treturn;\r\n// \t} else if (nyc.hasOwnProperty('nyc')) {\r\n// \t\tObject.entries(nyc.nyc).map(([key, value]) => {\r\n// \t\t\tnycResults.push(value);\r\n// \t\t});\r\n// \t}\r\n// \treturn <DataCard results={nycResults} />;\r\n// };\r\n\r\nconst DataView = ({ getNyc, getGaurdian, nyc, gaurdian }) => {\r\n\tuseEffect(() => {\r\n\t\tgetNyc();\r\n\t\tgetGaurdian();\r\n\t}, [getNyc, getGaurdian]);\r\n\r\n\tconst intialState = { nycResults: [], gaurdianData: [] };\r\n\r\n\tconst [nycResults, setNyc] = useState(['item']);\r\n\r\n\tconsole.log(nycResults);\r\n\r\n\tconst update = () => {\r\n\t\t() => {\r\n\t\t\treturn setNyc((nycResults = 'item'));\r\n\t\t};\r\n\r\n\t\t// pass results to state containers\r\n\t\t//setNyc(nycResults.push('item'));\r\n\t};\r\n\r\n\tconsole.log(update());\r\n\r\n\t// //function to map\r\n\t// const mapper = (arr, res) => {\r\n\t// \tconsole.log(res);\r\n\t// \tObject.entries(res).map(([key, value]) => {\r\n\t// \t\t{\r\n\t// \t\t\tpusher(nycResults, value);\r\n\t// \t\t\t//console.log('update', nycResults);\r\n\t// \t\t}\r\n\t// \t});\r\n\t// \treturn arr;\r\n\t// };\r\n\r\n\t// //create a function to filterResults\r\n\t// const filterResults = (arr, res, state) => {\r\n\t// \tconst nameCheck = res.hasOwnProperty('nyc') ? 'nyc.nyc' : 'gaurdian';\r\n\r\n\t// \t// const results =\r\n\t// \t// \tnameCheck === 'nyc.nyc'\r\n\t// \t// \t\t? mapper(nyResults, nyc)\r\n\t// \t// \t\t: mapper(gaurdianResults, gaurdian);\r\n\r\n\t// \t//return results;\r\n\t// };\r\n\r\n\t// filterResults(nycResults, nyc);\r\n\r\n\treturn <DataCard results={nycResults} />;\r\n};\r\n\r\nDataView.propTypes = {\r\n\tgetNyc: PropTypes.func.isRequired,\r\n\tgetGaurdian: PropTypes.func.isRequired,\r\n\tnyc: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n\tnyc: state.nyc,\r\n\tgaurdian: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps, { getNyc, getGaurdian })(DataView);\r\n"]},"metadata":{},"sourceType":"module"}