{"ast":null,"code":"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = (props, nyc) => {\n  //const nycData = props.nyc;\n  console.log(nycData);\n  const [nycData, setNyc] = useState({\n    nycResults: [],\n    gaurdianRsults: []\n  });\n\n  for (const item in nyc) {\n    if (item == undefined || null) {\n      console.log(nyc[item]);\n      delete nyc[item];\n      console.log(nyc);\n    }\n  } // // const initialState = {\n  // // \tfilteredNyc: []\n  // // };\n  // //\tconst [filteredNews, setNews] = usestate(initialState);\n  // const nycArr = Object.entries(nycData);\n  // console.log(nycData);\n  // const check = () => {\n  // \tif (nyc) {\n  // \t\tconst results = nyc.data.results;\n  // \t\treturn results;\n  // \t}\n  // };\n  // console.log(check());\n  // check.map(item => {\n  // \tconsole.log(item)\n  // })\n  //results.filter(item => console.log(item.title));\n  // }\n  // console.log(filteredNyc);\n  // filteredNyc.map(item => {\n  // \tconsole.log(item);\n  // });\n\n\n  return 'data';\n};\n\nDataCard.propTypes = {\n  nycState: PropTypes.object.isRequired //gaurdianData: PropTypes.object.isRequired\n\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc.nyc //gaurdianData: state.gaurdian.gaurdianData\n\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","useState","connect","PropTypes","DataCard","props","nyc","console","log","nycData","setNyc","nycResults","gaurdianRsults","item","undefined","propTypes","nycState","object","isRequired","mapStateToProps","state"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAChC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AAEA,QAAM,CAACA,OAAD,EAAUC,MAAV,IAAoBT,QAAQ,CAAC;AAClCU,IAAAA,UAAU,EAAE,EADsB;AAElCC,IAAAA,cAAc,EAAE;AAFkB,GAAD,CAAlC;;AAKA,OAAK,MAAMC,IAAX,IAAmBP,GAAnB,EAAwB;AACvB,QAAIO,IAAI,IAAIC,SAAR,IAAqB,IAAzB,EAA+B;AAC9BP,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACO,IAAD,CAAf;AACA,aAAOP,GAAG,CAACO,IAAD,CAAV;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA;AACD,GAf+B,CAiBhC;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AACA,SAAO,MAAP;AACA,CA9CD;;AAgDAF,QAAQ,CAACW,SAAT,GAAqB;AACpBC,EAAAA,QAAQ,EAAEb,SAAS,CAACc,MAAV,CAAiBC,UADP,CAEpB;;AAFoB,CAArB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjCd,EAAAA,GAAG,EAAEc,KAAK,CAACd,GAAN,CAAUA,GADkB,CAEjC;;AAFiC,CAAL,CAA7B;;AAKA,eAAeJ,OAAO,CAACiB,eAAD,CAAP,CAAyBf,QAAzB,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = (props, nyc) => {\r\n\t//const nycData = props.nyc;\r\n\tconsole.log(nycData);\r\n\r\n\tconst [nycData, setNyc] = useState({\r\n\t\tnycResults: [],\r\n\t\tgaurdianRsults: []\r\n\t});\r\n\r\n\tfor (const item in nyc) {\r\n\t\tif (item == undefined || null) {\r\n\t\t\tconsole.log(nyc[item]);\r\n\t\t\tdelete nyc[item];\r\n\t\t\tconsole.log(nyc);\r\n\t\t}\r\n\t}\r\n\r\n\t// // const initialState = {\r\n\t// // \tfilteredNyc: []\r\n\t// // };\r\n\r\n\t// //\tconst [filteredNews, setNews] = usestate(initialState);\r\n\r\n\t// const nycArr = Object.entries(nycData);\r\n\t// console.log(nycData);\r\n\t// const check = () => {\r\n\t// \tif (nyc) {\r\n\t// \t\tconst results = nyc.data.results;\r\n\t// \t\treturn results;\r\n\t// \t}\r\n\t// };\r\n\r\n\t// console.log(check());\r\n\r\n\t// check.map(item => {\r\n\t// \tconsole.log(item)\r\n\t// })\r\n\t//results.filter(item => console.log(item.title));\r\n\t// }\r\n\r\n\t// console.log(filteredNyc);\r\n\r\n\t// filteredNyc.map(item => {\r\n\t// \tconsole.log(item);\r\n\t// });\r\n\treturn 'data';\r\n};\r\n\r\nDataCard.propTypes = {\r\n\tnycState: PropTypes.object.isRequired\r\n\t//gaurdianData: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\tnyc: state.nyc.nyc\r\n\t//gaurdianData: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}