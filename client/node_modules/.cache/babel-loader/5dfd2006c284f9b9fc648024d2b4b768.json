{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataView.js\";\nimport React, { useEffect, useState } from 'react'; //import { Link, withRouter } from 'react-router-dom';\n\nimport { getNyc } from '../actions/getNyc';\nimport { getGaurdian } from '../actions/getGaurdian';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DataCard from './DataCard';\n\nconst DataView = ({\n  getNyc,\n  getGaurdian,\n  nyc,\n  gaurdian\n}) => {\n  useEffect(() => {\n    getNyc();\n    getGaurdian();\n  }, [getNyc, getGaurdian]);\n  const nycResults = [];\n  const gaurdianResults = [];\n\n  const update = (arr, arg) => {\n    arr.push(arg);\n  }; // let nameStr = '';\n  // if()\n  // req === 'nyc'\n  // name.hasOwnProperty('nyc')\n  // \t? (nameStr = 'nyc')\n  // \t: (nameStr = 'gaurdian');\n  // const objMap = Object.entries(name.name).map((key, value) => {\n  // \tconsole.log(update(nycResults, name.name[value]));\n  // });\n  // console.log(name);\n  //const nameCheck = name ? objMap : '';\n  // if (!gaurdian || !nyc) {\n  // \tnyc.hasOwnProperty('nyc') ? Object.entries(nyc.nyc).map(([key, value]) => {\n  // \t\t//console.log(typeof nycResults);\n  // \t\tupdate(nycResults, value);\n  // \t});\n  // if (gaurdian.hasOwnProperty('gaurdian')) {\n\n\n  console.log(gaurdian.hasOwnProperty(gardian));\n\n  if (gaurdian === undefined || null) {\n    return;\n  } else if (gaurdian.hasOwnProperty('gaurdian')) {\n    Object.entries(gaurdian.gaurdianData).map(([key, value]) => {\n      //console.log(typeof nycResults);\n      update(gaurdianResults, value);\n    });\n  }\n\n  if (!nyc && !gaurdian) {\n    return;\n  } else if (nyc.hasOwnProperty('nyc')) {\n    Object.entries(nyc.nyc).map(([key, value]) => {\n      //console.log(typeof nycResults);\n      update(nycResults, value);\n    });\n  } //objFilter(nycResults, nyc);\n\n\n  return /*#__PURE__*/React.createElement(DataCard, {\n    news: nycResults,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  });\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc,\n  gaurdian: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps, {\n  getNyc,\n  getGaurdian\n})(DataView);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataView.js"],"names":["React","useEffect","useState","getNyc","getGaurdian","connect","PropTypes","DataCard","DataView","nyc","gaurdian","nycResults","gaurdianResults","update","arr","arg","push","console","log","hasOwnProperty","gardian","undefined","Object","entries","gaurdianData","map","key","value","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEL,EAAAA,MAAF;AAAUC,EAAAA,WAAV;AAAuBK,EAAAA,GAAvB;AAA4BC,EAAAA;AAA5B,CAAD,KAA4C;AAC5DT,EAAAA,SAAS,CAAC,MAAM;AACfE,IAAAA,MAAM;AACNC,IAAAA,WAAW;AACX,GAHQ,EAGN,CAACD,MAAD,EAASC,WAAT,CAHM,CAAT;AAKA,QAAMO,UAAU,GAAG,EAAnB;AACA,QAAMC,eAAe,GAAG,EAAxB;;AAEA,QAAMC,MAAM,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5BD,IAAAA,GAAG,CAACE,IAAJ,CAASD,GAAT;AACA,GAFD,CAT4D,CAa5D;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACS,cAAT,CAAwBC,OAAxB,CAAZ;;AACA,MAAIV,QAAQ,KAAKW,SAAb,IAA0B,IAA9B,EAAoC;AACnC;AACA,GAFD,MAEO,IAAIX,QAAQ,CAACS,cAAT,CAAwB,UAAxB,CAAJ,EAAyC;AAC/CG,IAAAA,MAAM,CAACC,OAAP,CAAeb,QAAQ,CAACc,YAAxB,EAAsCC,GAAtC,CAA0C,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC3D;AACAd,MAAAA,MAAM,CAACD,eAAD,EAAkBe,KAAlB,CAAN;AACA,KAHD;AAIA;;AAED,MAAI,CAAClB,GAAD,IAAQ,CAACC,QAAb,EAAuB;AACtB;AACA,GAFD,MAEO,IAAID,GAAG,CAACU,cAAJ,CAAmB,KAAnB,CAAJ,EAA+B;AACrCG,IAAAA,MAAM,CAACC,OAAP,CAAed,GAAG,CAACA,GAAnB,EAAwBgB,GAAxB,CAA4B,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC7C;AACAd,MAAAA,MAAM,CAACF,UAAD,EAAagB,KAAb,CAAN;AACA,KAHD;AAIA,GAnD2D,CAqD5D;;;AACA,sBAAO,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEhB,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACA,CAvDD;;AAyDA,MAAMiB,eAAe,GAAGC,KAAK,KAAK;AACjCpB,EAAAA,GAAG,EAAEoB,KAAK,CAACpB,GADsB;AAEjCC,EAAAA,QAAQ,EAAEmB,KAAK,CAACnB,QAAN,CAAec;AAFQ,CAAL,CAA7B;;AAKA,eAAenB,OAAO,CAACuB,eAAD,EAAkB;AAAEzB,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAAkDI,QAAlD,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n//import { Link, withRouter } from 'react-router-dom';\r\nimport { getNyc } from '../actions/getNyc';\r\nimport { getGaurdian } from '../actions/getGaurdian';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DataCard from './DataCard';\r\n\r\nconst DataView = ({ getNyc, getGaurdian, nyc, gaurdian }) => {\r\n\tuseEffect(() => {\r\n\t\tgetNyc();\r\n\t\tgetGaurdian();\r\n\t}, [getNyc, getGaurdian]);\r\n\r\n\tconst nycResults = [];\r\n\tconst gaurdianResults = [];\r\n\r\n\tconst update = (arr, arg) => {\r\n\t\tarr.push(arg);\r\n\t};\r\n\r\n\t// let nameStr = '';\r\n\r\n\t// if()\r\n\t// req === 'nyc'\r\n\t// name.hasOwnProperty('nyc')\r\n\t// \t? (nameStr = 'nyc')\r\n\t// \t: (nameStr = 'gaurdian');\r\n\r\n\t// const objMap = Object.entries(name.name).map((key, value) => {\r\n\t// \tconsole.log(update(nycResults, name.name[value]));\r\n\t// });\r\n\t// console.log(name);\r\n\t//const nameCheck = name ? objMap : '';\r\n\r\n\t// if (!gaurdian || !nyc) {\r\n\t// \tnyc.hasOwnProperty('nyc') ? Object.entries(nyc.nyc).map(([key, value]) => {\r\n\t// \t\t//console.log(typeof nycResults);\r\n\t// \t\tupdate(nycResults, value);\r\n\t// \t});\r\n\r\n\t// if (gaurdian.hasOwnProperty('gaurdian')) {\r\n\tconsole.log(gaurdian.hasOwnProperty(gardian));\r\n\tif (gaurdian === undefined || null) {\r\n\t\treturn;\r\n\t} else if (gaurdian.hasOwnProperty('gaurdian')) {\r\n\t\tObject.entries(gaurdian.gaurdianData).map(([key, value]) => {\r\n\t\t\t//console.log(typeof nycResults);\r\n\t\t\tupdate(gaurdianResults, value);\r\n\t\t});\r\n\t}\r\n\r\n\tif (!nyc && !gaurdian) {\r\n\t\treturn;\r\n\t} else if (nyc.hasOwnProperty('nyc')) {\r\n\t\tObject.entries(nyc.nyc).map(([key, value]) => {\r\n\t\t\t//console.log(typeof nycResults);\r\n\t\t\tupdate(nycResults, value);\r\n\t\t});\r\n\t}\r\n\r\n\t//objFilter(nycResults, nyc);\r\n\treturn <DataCard news={nycResults} />;\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\tnyc: state.nyc,\r\n\tgaurdian: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps, { getNyc, getGaurdian })(DataView);\r\n"]},"metadata":{},"sourceType":"module"}