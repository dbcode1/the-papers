{"ast":null,"code":"import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = ({\n  data\n}) => {\n  const dataArr = Object.entries(data);\n  dataArr.map(item => {\n    console.log(item[1]);\n  });\n  console.log(dataArr[1]); // console.log(data);\n  // // break up data\n  // const nyt = data.data[0];\n  // console.log(typeof nyt);\n  // const gaurdian = data.data[1];\n  // console.log(data);\n  // const fred = () => {\n  // \tif (typeof data !== 'undefined') {\n  // \t\tdata.map(item => {\n  // \t\t\tconsole.log(item.section);\n  // \t\t\treturn <p>{item.section}</p>;\n  // \t\t});\n  // \t}\n  // };\n\n  return 'data'; // <ol>\n  // \t{nyt.map(item => (\n  // \t\t<li>{item}</li>\n  // \t))}\n  // </ol>\n}; // nytData.map(item => {\n// \tconsole.log(item);\n// })\n// const combineData = (arr1, arr2) => {\n// \treturn nytData !== null ? arr1.concat(arr2) : null;\n// };\n// const allData = combineData(nytData, gaurdianData);\n// allData.map(item => {\n// \tconsole.log(item);\n// });\n// //const mapData = () => {\n// if (allata !== null) {\n// \tallData.map(item => {\n// \t\tif (allData) {\n// \t\t\tconsole.log(item);\n// \t\t}\n// \t});\n// }\n// //};\n// if (typeof gaurdian !== 'undefined') {\n// \tgaurdian.map(item => {\n// \t\tconsole.log(item);\n// \t});\n// }\n\n\nDataCard.propTypes = {\n  DataCard: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","connect","PropTypes","DataCard","data","dataArr","Object","entries","map","item","console","log","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC9B,QAAMC,OAAO,GAAGC,MAAM,CAACC,OAAP,CAAeH,IAAf,CAAhB;AACAC,EAAAA,OAAO,CAACG,GAAR,CAAYC,IAAI,IAAI;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAAC,CAAD,CAAhB;AACA,GAFD;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,OAAO,CAAC,CAAD,CAAnB,EAL8B,CAM9B;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAO,MAAP,CAtB8B,CAuB9B;AACA;AACA;AACA;AACA;AACA,CA5BD,C,CA6BA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEAF,QAAQ,CAACS,SAAT,GAAqB;AACpBT,EAAAA,QAAQ,EAAED,SAAS,CAACW,IAAV,CAAeC,UADL;AAEpBV,EAAAA,IAAI,EAAEF,SAAS,CAACa,MAAV,CAAiBD;AAFH,CAArB;;AAIA,MAAME,eAAe,GAAGC,KAAK,KAAK;AACjCb,EAAAA,IAAI,EAAEa,KAAK,CAACb;AADqB,CAAL,CAA7B;;AAIA,eAAeH,OAAO,CAACe,eAAD,CAAP,CAAyBb,QAAzB,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = ({ data }) => {\r\n\tconst dataArr = Object.entries(data);\r\n\tdataArr.map(item => {\r\n\t\tconsole.log(item[1]);\r\n\t});\r\n\tconsole.log(dataArr[1]);\r\n\t// console.log(data);\r\n\t// // break up data\r\n\t// const nyt = data.data[0];\r\n\t// console.log(typeof nyt);\r\n\t// const gaurdian = data.data[1];\r\n\r\n\t// console.log(data);\r\n\t// const fred = () => {\r\n\t// \tif (typeof data !== 'undefined') {\r\n\t// \t\tdata.map(item => {\r\n\t// \t\t\tconsole.log(item.section);\r\n\t// \t\t\treturn <p>{item.section}</p>;\r\n\t// \t\t});\r\n\t// \t}\r\n\t// };\r\n\r\n\treturn 'data';\r\n\t// <ol>\r\n\t// \t{nyt.map(item => (\r\n\t// \t\t<li>{item}</li>\r\n\t// \t))}\r\n\t// </ol>\r\n};\r\n// nytData.map(item => {\r\n// \tconsole.log(item);\r\n// })\r\n\r\n// const combineData = (arr1, arr2) => {\r\n// \treturn nytData !== null ? arr1.concat(arr2) : null;\r\n// };\r\n\r\n// const allData = combineData(nytData, gaurdianData);\r\n// allData.map(item => {\r\n// \tconsole.log(item);\r\n// });\r\n\r\n// //const mapData = () => {\r\n// if (allata !== null) {\r\n// \tallData.map(item => {\r\n// \t\tif (allData) {\r\n// \t\t\tconsole.log(item);\r\n// \t\t}\r\n// \t});\r\n// }\r\n// //};\r\n\r\n// if (typeof gaurdian !== 'undefined') {\r\n// \tgaurdian.map(item => {\r\n// \t\tconsole.log(item);\r\n// \t});\r\n// }\r\n\r\nDataCard.propTypes = {\r\n\tDataCard: PropTypes.func.isRequired,\r\n\tdata: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n\tdata: state.data\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}