{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataCard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = ({\n  payload\n}) => {\n  const dataArr = Object.entries(payload);\n  console.log(payload);\n  const nyc = dataArr[0][1][0];\n  const gaurdian = dataArr[0][1][1];\n  let gaurdianFiltered = [];\n\n  if (gaurdian !== undefined) {\n    gaurdianFiltered = gaurdian.filter(item => item !== undefined);\n  }\n\n  const nycArr = [];\n  const gaurdianArr = [];\n  gaurdianFiltered.map(item => {\n    gaurdianArr.push(item);\n  });\n\n  if (typeof nyc !== 'undefined') {\n    data.data[0].map(item => {\n      nycArr.push(item);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 3\n    }\n  }, nycArr.map(item => /*#__PURE__*/React.createElement(\"li\", {\n    key: item.url,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, item.url.key)), gaurdianArr.map(item => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, item.webTitle)));\n};\n\nDataCard.propTypes = {\n  DataCard: PropTypes.func.isRequired,\n  payload: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","connect","PropTypes","DataCard","payload","dataArr","Object","entries","console","log","nyc","gaurdian","gaurdianFiltered","undefined","filter","item","nycArr","gaurdianArr","map","push","data","url","key","webTitle","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACjC,QAAMC,OAAO,GAAGC,MAAM,CAACC,OAAP,CAAeH,OAAf,CAAhB;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AAEA,QAAMM,GAAG,GAAGL,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,EAAc,CAAd,CAAZ;AACA,QAAMM,QAAQ,GAAGN,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,EAAc,CAAd,CAAjB;AACA,MAAIO,gBAAgB,GAAG,EAAvB;;AAEA,MAAID,QAAQ,KAAKE,SAAjB,EAA4B;AAC3BD,IAAAA,gBAAgB,GAAGD,QAAQ,CAACG,MAAT,CAAgBC,IAAI,IAAIA,IAAI,KAAKF,SAAjC,CAAnB;AACA;;AAED,QAAMG,MAAM,GAAG,EAAf;AACA,QAAMC,WAAW,GAAG,EAApB;AAEAL,EAAAA,gBAAgB,CAACM,GAAjB,CAAqBH,IAAI,IAAI;AAC5BE,IAAAA,WAAW,CAACE,IAAZ,CAAiBJ,IAAjB;AACA,GAFD;;AAIA,MAAI,OAAOL,GAAP,KAAe,WAAnB,EAAgC;AAC/BU,IAAAA,IAAI,CAACA,IAAL,CAAU,CAAV,EAAaF,GAAb,CAAiBH,IAAI,IAAI;AACxBC,MAAAA,MAAM,CAACG,IAAP,CAAYJ,IAAZ;AACA,KAFD;AAGA;;AAED,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEC,MAAM,CAACE,GAAP,CAAWH,IAAI,iBACf;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACM,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBN,IAAI,CAACM,GAAL,CAASC,GAA7B,CADA,CADF,EAIEL,WAAW,CAACC,GAAZ,CAAgBH,IAAI,iBACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,IAAI,CAACQ,QAAV,CADA,CAJF,CADD;AAUA,CApCD;;AAsCApB,QAAQ,CAACqB,SAAT,GAAqB;AACpBrB,EAAAA,QAAQ,EAAED,SAAS,CAACuB,IAAV,CAAeC,UADL;AAEpBtB,EAAAA,OAAO,EAAEF,SAAS,CAACyB,MAAV,CAAiBD;AAFN,CAArB;;AAIA,MAAME,eAAe,GAAGC,KAAK,KAAK;AACjCT,EAAAA,IAAI,EAAES,KAAK,CAACT;AADqB,CAAL,CAA7B;;AAIA,eAAenB,OAAO,CAAC2B,eAAD,CAAP,CAAyBzB,QAAzB,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = ({ payload }) => {\r\n\tconst dataArr = Object.entries(payload);\r\n\r\n\tconsole.log(payload);\r\n\r\n\tconst nyc = dataArr[0][1][0];\r\n\tconst gaurdian = dataArr[0][1][1];\r\n\tlet gaurdianFiltered = [];\r\n\r\n\tif (gaurdian !== undefined) {\r\n\t\tgaurdianFiltered = gaurdian.filter(item => item !== undefined);\r\n\t}\r\n\r\n\tconst nycArr = [];\r\n\tconst gaurdianArr = [];\r\n\r\n\tgaurdianFiltered.map(item => {\r\n\t\tgaurdianArr.push(item);\r\n\t});\r\n\r\n\tif (typeof nyc !== 'undefined') {\r\n\t\tdata.data[0].map(item => {\r\n\t\t\tnycArr.push(item);\r\n\t\t});\r\n\t}\r\n\r\n\treturn (\r\n\t\t<ol>\r\n\t\t\t{nycArr.map(item => (\r\n\t\t\t\t<li key={item.url}>{item.url.key}</li>\r\n\t\t\t))}\r\n\t\t\t{gaurdianArr.map(item => (\r\n\t\t\t\t<li>{item.webTitle}</li>\r\n\t\t\t))}\r\n\t\t</ol>\r\n\t);\r\n};\r\n\r\nDataCard.propTypes = {\r\n\tDataCard: PropTypes.func.isRequired,\r\n\tpayload: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n\tdata: state.data\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}