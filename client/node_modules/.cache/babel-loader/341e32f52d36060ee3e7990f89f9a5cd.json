{"ast":null,"code":"import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getNyc } from '../actions/getNyc';\nimport { getGaurdian } from '../actions/getGaurdian';\n\nconst DataCard = ({\n  nycData,\n  gaurdianData,\n  data\n}) => {\n  // const dataArr = Object.entries(data);\n  // console.log(ata);\n  // const nyc = dataArr[0][1][0];\n  // const gaurdian = dataArr[0][1][1];\n  // let gaurdianFiltered = [];\n  // if (gaurdian !== undefined) {\n  // \tgaurdianFiltered = gaurdian.filter(item => item !== undefined);\n  // }\n  // const nycArr = [];\n  // const gaurdianArr = [];\n  // gaurdianFiltered.map(item => {\n  // \tgaurdianArr.push(item);\n  // });\n  // if (typeof nyc !== 'undefined') {\n  // \tdata.data[0].map(item => {\n  // \t\tnycArr.push(item);\n  // \t});\n  // }\n  // return (\n  // \t<ol>\n  // \t\t{nycArr.map}(item => (\n  // \t\t\t<li key={item.url}>{item.url.key}</li>\n  // \t\t))}\n  // \t\t{gaurdianArr.map(item => (\n  // \t\t\t<li>{item.webTitle}</li>\n  // \t\t))}\n  // \t</ol>\n  // );\n  console.log(data);\n  return 'datacard';\n};\n\nDataCard.propTypes = {\n  getNyc: PropTypes.func.isRequired,\n  getGaurdian: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nexport default connect(mapStateToProps, {\n  getNyc,\n  getGaurdian\n})(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","connect","PropTypes","getNyc","getGaurdian","DataCard","nycData","gaurdianData","data","console","log","propTypes","func","isRequired","mapStateToProps","state"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,YAAX;AAAyBC,EAAAA;AAAzB,CAAD,KAAqC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SAAO,UAAP;AACA,CA/BD;;AAiCAH,QAAQ,CAACM,SAAT,GAAqB;AACpBR,EAAAA,MAAM,EAAED,SAAS,CAACU,IAAV,CAAeC,UADH;AAEpBT,EAAAA,WAAW,EAAEF,SAAS,CAACU,IAAV,CAAeC;AAFR,CAArB;;AAIA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjCP,EAAAA,IAAI,EAAEO,KAAK,CAACP;AADqB,CAAL,CAA7B;;AAIA,eAAeP,OAAO,CAACa,eAAD,EAAkB;AAAEX,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAAkDC,QAAlD,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { getNyc } from '../actions/getNyc';\r\nimport { getGaurdian } from '../actions/getGaurdian';\r\n\r\nconst DataCard = ({ nycData, gaurdianData, data }) => {\r\n\t// const dataArr = Object.entries(data);\r\n\t// console.log(ata);\r\n\t// const nyc = dataArr[0][1][0];\r\n\t// const gaurdian = dataArr[0][1][1];\r\n\t// let gaurdianFiltered = [];\r\n\t// if (gaurdian !== undefined) {\r\n\t// \tgaurdianFiltered = gaurdian.filter(item => item !== undefined);\r\n\t// }\r\n\t// const nycArr = [];\r\n\t// const gaurdianArr = [];\r\n\t// gaurdianFiltered.map(item => {\r\n\t// \tgaurdianArr.push(item);\r\n\t// });\r\n\t// if (typeof nyc !== 'undefined') {\r\n\t// \tdata.data[0].map(item => {\r\n\t// \t\tnycArr.push(item);\r\n\t// \t});\r\n\t// }\r\n\t// return (\r\n\t// \t<ol>\r\n\t// \t\t{nycArr.map}(item => (\r\n\t// \t\t\t<li key={item.url}>{item.url.key}</li>\r\n\t// \t\t))}\r\n\t// \t\t{gaurdianArr.map(item => (\r\n\t// \t\t\t<li>{item.webTitle}</li>\r\n\t// \t\t))}\r\n\t// \t</ol>\r\n\t// );\r\n\tconsole.log(data);\r\n\treturn 'datacard';\r\n};\r\n\r\nDataCard.propTypes = {\r\n\tgetNyc: PropTypes.func.isRequired,\r\n\tgetGaurdian: PropTypes.func.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n\tdata: state.data\r\n});\r\n\r\nexport default connect(mapStateToProps, { getNyc, getGaurdian })(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}