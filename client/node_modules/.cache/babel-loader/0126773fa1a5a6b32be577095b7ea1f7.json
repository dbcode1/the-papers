{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataView.js\";\nimport React, { useEffect, useState } from 'react'; //import { Link, withRouter } from 'react-router-dom';\n\nimport { getNyc } from '../actions/getNyc';\nimport { getGaurdian } from '../actions/getGaurdian';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DataCard from './DataCard';\n\nconst DataView = ({\n  getNyc,\n  getGaurdian,\n  nyc\n}) => {\n  useEffect(() => {\n    getNyc();\n    getGaurdian();\n  }, [getNyc]);\n  const intialState = {\n    nycResults: []\n  };\n  const [nycResults, setResults] = useState([]);\n\n  const Update = (arr, arg) => {\n    const setResult = (arr, arg) => {\n      arr.push(arg);\n    };\n  };\n\n  if (typeof nyc === undefined) {\n    return;\n  } else if (nyc.hasOwnProperty('nyc')) {\n    Object.entries(nyc.nyc).map(([key, value]) => {\n      Update(nycResults, value);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(DataCard, {\n    news: nycResults,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  });\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc,\n  gaurdian: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps, {\n  getNyc,\n  getGaurdian\n})(DataView);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataView.js"],"names":["React","useEffect","useState","getNyc","getGaurdian","connect","PropTypes","DataCard","DataView","nyc","intialState","nycResults","setResults","Update","arr","arg","setResult","push","undefined","hasOwnProperty","Object","entries","map","key","value","mapStateToProps","state","gaurdian","gaurdianData"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEL,EAAAA,MAAF;AAAUC,EAAAA,WAAV;AAAuBK,EAAAA;AAAvB,CAAD,KAAkC;AAClDR,EAAAA,SAAS,CAAC,MAAM;AACfE,IAAAA,MAAM;AACNC,IAAAA,WAAW;AACX,GAHQ,EAGN,CAACD,MAAD,CAHM,CAAT;AAKA,QAAMO,WAAW,GAAG;AAAEC,IAAAA,UAAU,EAAE;AAAd,GAApB;AAEA,QAAM,CAACA,UAAD,EAAaC,UAAb,IAA2BV,QAAQ,CAAC,EAAD,CAAzC;;AAEA,QAAMW,MAAM,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5B,UAAMC,SAAS,GAAG,CAACF,GAAD,EAAMC,GAAN,KAAc;AAC/BD,MAAAA,GAAG,CAACG,IAAJ,CAASF,GAAT;AACA,KAFD;AAGA,GAJD;;AAMA,MAAI,OAAON,GAAP,KAAeS,SAAnB,EAA8B;AAC7B;AACA,GAFD,MAEO,IAAIT,GAAG,CAACU,cAAJ,CAAmB,KAAnB,CAAJ,EAA+B;AACrCC,IAAAA,MAAM,CAACC,OAAP,CAAeZ,GAAG,CAACA,GAAnB,EAAwBa,GAAxB,CAA4B,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC7CX,MAAAA,MAAM,CAACF,UAAD,EAAaa,KAAb,CAAN;AACA,KAFD;AAGA;;AACD,sBAAO,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAEb,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACA,CAxBD;;AA0BA,MAAMc,eAAe,GAAGC,KAAK,KAAK;AACjCjB,EAAAA,GAAG,EAAEiB,KAAK,CAACjB,GADsB;AAEjCkB,EAAAA,QAAQ,EAAED,KAAK,CAACC,QAAN,CAAeC;AAFQ,CAAL,CAA7B;;AAKA,eAAevB,OAAO,CAACoB,eAAD,EAAkB;AAAEtB,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAAkDI,QAAlD,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n//import { Link, withRouter } from 'react-router-dom';\r\nimport { getNyc } from '../actions/getNyc';\r\nimport { getGaurdian } from '../actions/getGaurdian';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DataCard from './DataCard';\r\n\r\nconst DataView = ({ getNyc, getGaurdian, nyc }) => {\r\n\tuseEffect(() => {\r\n\t\tgetNyc();\r\n\t\tgetGaurdian();\r\n\t}, [getNyc]);\r\n\r\n\tconst intialState = { nycResults: [] };\r\n\r\n\tconst [nycResults, setResults] = useState([]);\r\n\r\n\tconst Update = (arr, arg) => {\r\n\t\tconst setResult = (arr, arg) => {\r\n\t\t\tarr.push(arg);\r\n\t\t};\r\n\t};\r\n\r\n\tif (typeof nyc === undefined) {\r\n\t\treturn;\r\n\t} else if (nyc.hasOwnProperty('nyc')) {\r\n\t\tObject.entries(nyc.nyc).map(([key, value]) => {\r\n\t\t\tUpdate(nycResults, value);\r\n\t\t});\r\n\t}\r\n\treturn <DataCard news={nycResults} />;\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\tnyc: state.nyc,\r\n\tgaurdian: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps, { getNyc, getGaurdian })(DataView);\r\n"]},"metadata":{},"sourceType":"module"}