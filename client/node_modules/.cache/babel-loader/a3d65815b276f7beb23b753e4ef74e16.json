{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataView.js\";\nimport React, { useEffect } from 'react'; //import { Link, withRouter } from 'react-router-dom';\n\nimport { getData } from '../actions/data';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataView = ({\n  data,\n  getData\n}) => {\n  useEffect(() => {\n    getData();\n  }, [getData]);\n  console.log(data.data);\n  console.log(Object.entries(data));\n  const allData = Object.entries(data); // how do i skip over an array with null in it\n  // using filter to eliminate bad results\n  // WORK SMART FROM THE START TO SAVE TIME\n  // if (typeof array[index] !== 'undefined' && array[index] !== null) {\n\n  console.log(typeof data); // allData.map(newsArr => {\n  // \tif (newsArr[0].data !== null) {\n  // \t\tconsole.log(newsArr[1]);\n  // \t}\n  // });\n  // if (data.data !== null) {\n  // \tconsole.log(data.data);\n  // \tdata.data.map(items => {\n  // \t\tconst news1 = items;\n  // \t\tconsole.log(news1);\n  // \t\tconst news = items.data.results;\n  // \t\tconsole.log(news);\n  // \t});\n  // }\n  // const dataObj = Object.entries(data.data);\n\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    onClick: getData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"Reader\");\n};\n\nDataView.propTypes = {\n  DataView: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nexport default connect(mapStateToProps, {\n  getData\n})(DataView);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataView.js"],"names":["React","useEffect","getData","connect","PropTypes","DataView","data","console","log","Object","entries","allData","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQJ,EAAAA;AAAR,CAAD,KAAuB;AACvCD,EAAAA,SAAS,CAAC,MAAM;AACfC,IAAAA,OAAO;AACP,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIAK,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACA,IAAjB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAP,CAAeJ,IAAf,CAAZ;AAEA,QAAMK,OAAO,GAAGF,MAAM,CAACC,OAAP,CAAeJ,IAAf,CAAhB,CATuC,CAWvC;AACA;AACA;AAEA;;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAOF,IAAnB,EAjBuC,CAmBvC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,sBAAO;AAAI,IAAA,OAAO,EAAEJ,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACA,CAtCD;;AAwCAG,QAAQ,CAACO,SAAT,GAAqB;AACpBP,EAAAA,QAAQ,EAAED,SAAS,CAACS,IAAV,CAAeC,UADL;AAEpBR,EAAAA,IAAI,EAAEF,SAAS,CAACW,MAAV,CAAiBD;AAFH,CAArB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AACjCX,EAAAA,IAAI,EAAEW,KAAK,CAACX;AADqB,CAAL,CAA7B;;AAIA,eAAeH,OAAO,CAACa,eAAD,EAAkB;AAAEd,EAAAA;AAAF,CAAlB,CAAP,CAAsCG,QAAtC,CAAf","sourcesContent":["import React, { useEffect } from 'react';\r\n//import { Link, withRouter } from 'react-router-dom';\r\nimport { getData } from '../actions/data';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataView = ({ data, getData }) => {\r\n\tuseEffect(() => {\r\n\t\tgetData();\r\n\t}, [getData]);\r\n\r\n\tconsole.log(data.data);\r\n\r\n\tconsole.log(Object.entries(data));\r\n\r\n\tconst allData = Object.entries(data);\r\n\r\n\t// how do i skip over an array with null in it\r\n\t// using filter to eliminate bad results\r\n\t// WORK SMART FROM THE START TO SAVE TIME\r\n\r\n\t// if (typeof array[index] !== 'undefined' && array[index] !== null) {\r\n\r\n\tconsole.log(typeof data);\r\n\r\n\t// allData.map(newsArr => {\r\n\t// \tif (newsArr[0].data !== null) {\r\n\t// \t\tconsole.log(newsArr[1]);\r\n\t// \t}\r\n\t// });\r\n\r\n\t// if (data.data !== null) {\r\n\t// \tconsole.log(data.data);\r\n\t// \tdata.data.map(items => {\r\n\t// \t\tconst news1 = items;\r\n\t// \t\tconsole.log(news1);\r\n\t// \t\tconst news = items.data.results;\r\n\t// \t\tconsole.log(news);\r\n\t// \t});\r\n\t// }\r\n\r\n\t// const dataObj = Object.entries(data.data);\r\n\r\n\treturn <h1 onClick={getData}>Reader</h1>;\r\n};\r\n\r\nDataView.propTypes = {\r\n\tDataView: PropTypes.func.isRequired,\r\n\tdata: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\tdata: state.data\r\n});\r\n\r\nexport default connect(mapStateToProps, { getData })(DataView);\r\n"]},"metadata":{},"sourceType":"module"}