{"ast":null,"code":"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = (props, nycData, gaurdianData) => {\n  const nyc = props.nycData;\n  const gaurdian = props.gaurdianData;\n\n  const nycCards = arr => {\n    if (nyc) {\n      nyc.data.results.map(item => {\n        return {\n          item\n        };\n      });\n    }\n  };\n\n  console.log(nycCards(nyc)); // if (!nyc) {\n  // \tnyc.map(ite} => {\n  // \t\tconsole.log(item);\n  // \t});\n  // }\n  //const nycArr = Object.entries(nyc);\n  // const nyc = dataArr[0][1][0];\n  // const gaurdian = dataArr[0][1][1];\n  // let gaurdianFiltered = [];\n  // if (gaurdian !== undefined) {\n  // \tgaurdianFiltered = gaurdian.filter(item => item !== undefined);\n  // }\n  // const nycArr = [];\n  // const gaurdianArr = [];\n  // gaurdianFiltered.map(item => {\n  // \tgaurdianArr.push(item);\n  // });\n  // if (typeof nyc !== 'undefined') {\n  // \tdata.data[0].map(item => {\n  // \t\tnycArr.push(item);\n  // \t});\n  // }\n  // return (\n  // \t<ol>\n  // \t\t{nycArr.map}(item => (\n  // \t\t\t<li key={item.url}>{item.url.key}</li>\n  // \t\t))}\n  // \t\t{gaurdianArr.map(item => (\n  // \t\t\t<li>{item.webTitle}</li>\n  // \t\t))}\n  // \t</ol>\n  // );\n\n  return 'data';\n};\n\nDataCard.propTypes = {\n  nycData: PropTypes.object.isRequired,\n  gaurdianData: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  nycData: state.nyc.nycData,\n  gaurdianData: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","useState","connect","PropTypes","DataCard","props","nycData","gaurdianData","nyc","gaurdian","nycCards","arr","data","results","map","item","console","log","propTypes","object","isRequired","mapStateToProps","state"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,OAAR,EAAiBC,YAAjB,KAAkC;AAClD,QAAMC,GAAG,GAAGH,KAAK,CAACC,OAAlB;AACA,QAAMG,QAAQ,GAAGJ,KAAK,CAACE,YAAvB;;AAEA,QAAMG,QAAQ,GAAGC,GAAG,IAAI;AACvB,QAAIH,GAAJ,EAAS;AACRA,MAAAA,GAAG,CAACI,IAAJ,CAASC,OAAT,CAAiBC,GAAjB,CAAqBC,IAAI,IAAI;AAC5B,eAAO;AAAEA,UAAAA;AAAF,SAAP;AACA,OAFD;AAGA;AACD,GAND;;AAQAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,QAAQ,CAACF,GAAD,CAApB,EAZkD,CAclD;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAO,MAAP;AACA,CAlDD;;AAoDAJ,QAAQ,CAACc,SAAT,GAAqB;AACpBZ,EAAAA,OAAO,EAAEH,SAAS,CAACgB,MAAV,CAAiBC,UADN;AAEpBb,EAAAA,YAAY,EAAEJ,SAAS,CAACgB,MAAV,CAAiBC;AAFX,CAArB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjChB,EAAAA,OAAO,EAAEgB,KAAK,CAACd,GAAN,CAAUF,OADc;AAEjCC,EAAAA,YAAY,EAAEe,KAAK,CAACb,QAAN,CAAeF;AAFI,CAAL,CAA7B;;AAKA,eAAeL,OAAO,CAACmB,eAAD,CAAP,CAAyBjB,QAAzB,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = (props, nycData, gaurdianData) => {\r\n\tconst nyc = props.nycData;\r\n\tconst gaurdian = props.gaurdianData;\r\n\r\n\tconst nycCards = arr => {\r\n\t\tif (nyc) {\r\n\t\t\tnyc.data.results.map(item => {\r\n\t\t\t\treturn { item };\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tconsole.log(nycCards(nyc));\r\n\r\n\t// if (!nyc) {\r\n\t// \tnyc.map(ite} => {\r\n\t// \t\tconsole.log(item);\r\n\t// \t});\r\n\t// }\r\n\r\n\t//const nycArr = Object.entries(nyc);\r\n\r\n\t// const nyc = dataArr[0][1][0];\r\n\t// const gaurdian = dataArr[0][1][1];\r\n\t// let gaurdianFiltered = [];\r\n\t// if (gaurdian !== undefined) {\r\n\t// \tgaurdianFiltered = gaurdian.filter(item => item !== undefined);\r\n\t// }\r\n\t// const nycArr = [];\r\n\t// const gaurdianArr = [];\r\n\t// gaurdianFiltered.map(item => {\r\n\t// \tgaurdianArr.push(item);\r\n\t// });\r\n\t// if (typeof nyc !== 'undefined') {\r\n\t// \tdata.data[0].map(item => {\r\n\t// \t\tnycArr.push(item);\r\n\t// \t});\r\n\t// }\r\n\t// return (\r\n\t// \t<ol>\r\n\t// \t\t{nycArr.map}(item => (\r\n\t// \t\t\t<li key={item.url}>{item.url.key}</li>\r\n\t// \t\t))}\r\n\t// \t\t{gaurdianArr.map(item => (\r\n\t// \t\t\t<li>{item.webTitle}</li>\r\n\t// \t\t))}\r\n\t// \t</ol>\r\n\t// );\r\n\r\n\treturn 'data';\r\n};\r\n\r\nDataCard.propTypes = {\r\n\tnycData: PropTypes.object.isRequired,\r\n\tgaurdianData: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\tnycData: state.nyc.nycData,\r\n\tgaurdianData: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}