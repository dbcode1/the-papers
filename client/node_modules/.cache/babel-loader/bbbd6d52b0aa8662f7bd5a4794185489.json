{"ast":null,"code":"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = (props, nycData, gaurdianData) => {\n  const nyc = props.nycData;\n  const gaurdian = props.gaurdianData;\n  console.log('render'); // const nycCards = nyc => {\n  // \tif (nyc) {\n  // \t\treturn nyc.map(item => {\n  // \t\t\treturn item;\n  // \t\t});\n  // \t}\n  // };\n\n  if (nyc) {\n    const nycArr = nyc.data.results;\n    console.log(nycArr);\n  }\n\n  for (let item in nyc) {} //console.log(nyc[item]);\n  //console.log(nycCards());\n  // if (!nyc) {\n  // \tnyc.map(ite} => {\n  // \t\tconsole.log(item);\n  // \t});\n  // }\n  //const nycArr = Object.entries(nyc);\n  // const nyc = dataArr[0][1][0];\n  // const gaurdian = dataArr[0][1][1];\n  // let gaurdianFiltered = [];\n  // if (gaurdian !== undefined) {\n  // \tgaurdianFiltered = gaurdian.filter(item => item !== undefined);\n  // }\n  // const nycArr = [];\n  // const gaurdianArr = [];\n  // gaurdianFiltered.map(item => {\n  // \tgaurdianArr.push(item);\n  // });\n  // if (typeof nyc !== 'undefined') {\n  // \tdata.data[0].map(item => {\n  // \t\tnycArr.push(item);\n  // \t});\n  // }\n  // return (\n  // \t<ol>\n  // \t\t{nycArr.map}(item => (\n  // \t\t\t<li key={item.url}>{item.url.key}</li>\n  // \t\t))}\n  // \t\t{gaurdianArr.map(item => (\n  // \t\t\t<li>{item.webTitle}</li>\n  // \t\t))}\n  // \t</ol>\n  // );\n\n\n  return 'data';\n};\n\nDataCard.propTypes = {\n  nycData: PropTypes.object.isRequired,\n  gaurdianData: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  nycState: state.nyc.nycData,\n  gaurdianData: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","useState","connect","PropTypes","DataCard","props","nycData","gaurdianData","nyc","gaurdian","console","log","nycArr","data","results","item","propTypes","object","isRequired","mapStateToProps","state","nycState"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,OAAR,EAAiBC,YAAjB,KAAkC;AAClD,QAAMC,GAAG,GAAGH,KAAK,CAACC,OAAlB;AACA,QAAMG,QAAQ,GAAGJ,KAAK,CAACE,YAAvB;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAJkD,CAKlD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIH,GAAJ,EAAS;AACR,UAAMI,MAAM,GAAGJ,GAAG,CAACK,IAAJ,CAASC,OAAxB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACA;;AAED,OAAK,IAAIG,IAAT,IAAiBP,GAAjB,EAAsB,CAErB,CAFD,CACC;AAGD;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAO,MAAP;AACA,CA5DD;;AA8DAJ,QAAQ,CAACY,SAAT,GAAqB;AACpBV,EAAAA,OAAO,EAAEH,SAAS,CAACc,MAAV,CAAiBC,UADN;AAEpBX,EAAAA,YAAY,EAAEJ,SAAS,CAACc,MAAV,CAAiBC;AAFX,CAArB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjCC,EAAAA,QAAQ,EAAED,KAAK,CAACZ,GAAN,CAAUF,OADa;AAEjCC,EAAAA,YAAY,EAAEa,KAAK,CAACX,QAAN,CAAeF;AAFI,CAAL,CAA7B;;AAKA,eAAeL,OAAO,CAACiB,eAAD,CAAP,CAAyBf,QAAzB,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = (props, nycData, gaurdianData) => {\r\n\tconst nyc = props.nycData;\r\n\tconst gaurdian = props.gaurdianData;\r\n\r\n\tconsole.log('render');\r\n\t// const nycCards = nyc => {\r\n\t// \tif (nyc) {\r\n\t// \t\treturn nyc.map(item => {\r\n\t// \t\t\treturn item;\r\n\t// \t\t});\r\n\t// \t}\r\n\t// };\r\n\r\n\tif (nyc) {\r\n\t\tconst nycArr = nyc.data.results;\r\n\t\tconsole.log(nycArr);\r\n\t}\r\n\r\n\tfor (let item in nyc) {\r\n\t\t//console.log(nyc[item]);\r\n\t}\r\n\r\n\t//console.log(nycCards());\r\n\r\n\t// if (!nyc) {\r\n\t// \tnyc.map(ite} => {\r\n\t// \t\tconsole.log(item);\r\n\t// \t});\r\n\t// }\r\n\r\n\t//const nycArr = Object.entries(nyc);\r\n\r\n\t// const nyc = dataArr[0][1][0];\r\n\t// const gaurdian = dataArr[0][1][1];\r\n\t// let gaurdianFiltered = [];\r\n\t// if (gaurdian !== undefined) {\r\n\t// \tgaurdianFiltered = gaurdian.filter(item => item !== undefined);\r\n\t// }\r\n\t// const nycArr = [];\r\n\t// const gaurdianArr = [];\r\n\t// gaurdianFiltered.map(item => {\r\n\t// \tgaurdianArr.push(item);\r\n\t// });\r\n\t// if (typeof nyc !== 'undefined') {\r\n\t// \tdata.data[0].map(item => {\r\n\t// \t\tnycArr.push(item);\r\n\t// \t});\r\n\t// }\r\n\t// return (\r\n\t// \t<ol>\r\n\t// \t\t{nycArr.map}(item => (\r\n\t// \t\t\t<li key={item.url}>{item.url.key}</li>\r\n\t// \t\t))}\r\n\t// \t\t{gaurdianArr.map(item => (\r\n\t// \t\t\t<li>{item.webTitle}</li>\r\n\t// \t\t))}\r\n\t// \t</ol>\r\n\t// );\r\n\r\n\treturn 'data';\r\n};\r\n\r\nDataCard.propTypes = {\r\n\tnycData: PropTypes.object.isRequired,\r\n\tgaurdianData: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\tnycState: state.nyc.nycData,\r\n\tgaurdianData: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}