{"ast":null,"code":"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = (props, nycState, gaurdianData) => {\n  const nyc = props.nycState;\n  const gaurdian = props.gaurdianData; // const nycFilter = () => {\n  // \tif (nyc) {\n  // \t\tconst nycArr = nyc.data.results;\n  // for (const item in nycArr) {\n  // \treturn nycArr[item];\n  // }\n  // \t}\n  // };\n  // const dataNy = nycFilter();\n\n  const filter = obj => {\n    for (const propName in obj) {\n      if (obj[propName] === null || obj[propName] === undefined) {\n        delete obj[propName];\n      }\n    } //return obj;\n\n  };\n\n  const v = filter(nyc);\n  console.log(v);\n\n  const getNycResults = () => {\n    if (nyc) {\n      const nycArr = Object.entries(nyc);\n      nycArr.map(([key, value]) => {//console.log(key);\n      }); // //console.log(typeof nycArr);\n      // const results = nycArr[0][1].results;\n      // //console.log(typeof Object.entries(results));\n      // for (const item in nycArr) {\n      // \treturn nycArr[item];\n      // }\n    }\n  };\n\n  getNycResults(); // const nycResults = getNycResults();\n  // console.log(nycResults);\n  // nycResults.map(item => {\n  // \tconsole.log(item);\n  // });\n  // const nycFiltered = Object.keys(nyc).forEach(\n  // \tkey => nyc[key] == null && delete nyc[key]\n  // );\n  // const filter =\n  // \tnyc\n  // \t\t? nyc.data.results.map(item => {\n  // \t\t\t\treturn item;\n  // \t\t  })\n  // \t\t: null;\n  // console.log(filter);\n  //const filter = nyc.filter(item => item);\n  // const filteredNyc = nyc.data.results.filter(item => item !== null);\n  // for (let item in nyc) {\n  // \t//console.log(nyc[item]);\n  // }\n  // }\n  // return (\n  // \t<ol>\n  // \t\t{nycArr.map}(item => (\n  // \t\t\t<li key={item.url}>{item.url.key}</li>\n  // \t\t))}\n  // \t\t{gaurdianArr.map(item => (\n  // \t\t\t<li>{item.webTitle}</li>\n  // \t\t))}\n  // \t</ol>\n  // );\n\n  return 'data';\n};\n\nDataCard.propTypes = {\n  nycState: PropTypes.object.isRequired,\n  gaurdianData: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  nycState: state.nyc.nycState,\n  gaurdianData: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","useState","connect","PropTypes","DataCard","props","nycState","gaurdianData","nyc","gaurdian","filter","obj","propName","undefined","v","console","log","getNycResults","nycArr","Object","entries","map","key","value","propTypes","object","isRequired","mapStateToProps","state"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,YAAlB,KAAmC;AACnD,QAAMC,GAAG,GAAGH,KAAK,CAACC,QAAlB;AACA,QAAMG,QAAQ,GAAGJ,KAAK,CAACE,YAAvB,CAFmD,CAInD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,QAAMG,MAAM,GAAGC,GAAG,IAAI;AACrB,SAAK,MAAMC,QAAX,IAAuBD,GAAvB,EAA4B;AAC3B,UAAIA,GAAG,CAACC,QAAD,CAAH,KAAkB,IAAlB,IAA0BD,GAAG,CAACC,QAAD,CAAH,KAAkBC,SAAhD,EAA2D;AAC1D,eAAOF,GAAG,CAACC,QAAD,CAAV;AACA;AACD,KALoB,CAMrB;;AACA,GAPD;;AAQA,QAAME,CAAC,GAAGJ,MAAM,CAACF,GAAD,CAAhB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;;AAEA,QAAMG,aAAa,GAAG,MAAM;AAC3B,QAAIT,GAAJ,EAAS;AACR,YAAMU,MAAM,GAAGC,MAAM,CAACC,OAAP,CAAeZ,GAAf,CAAf;AAEAU,MAAAA,MAAM,CAACG,GAAP,CAAW,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkB,CAC5B;AACA,OAFD,EAHQ,CAMR;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAdD;;AAgBAN,EAAAA,aAAa,GA1CsC,CA4CnD;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAO,MAAP;AACA,CApFD;;AAsFAb,QAAQ,CAACoB,SAAT,GAAqB;AACpBlB,EAAAA,QAAQ,EAAEH,SAAS,CAACsB,MAAV,CAAiBC,UADP;AAEpBnB,EAAAA,YAAY,EAAEJ,SAAS,CAACsB,MAAV,CAAiBC;AAFX,CAArB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjCtB,EAAAA,QAAQ,EAAEsB,KAAK,CAACpB,GAAN,CAAUF,QADa;AAEjCC,EAAAA,YAAY,EAAEqB,KAAK,CAACnB,QAAN,CAAeF;AAFI,CAAL,CAA7B;;AAKA,eAAeL,OAAO,CAACyB,eAAD,CAAP,CAAyBvB,QAAzB,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = (props, nycState, gaurdianData) => {\r\n\tconst nyc = props.nycState;\r\n\tconst gaurdian = props.gaurdianData;\r\n\r\n\t// const nycFilter = () => {\r\n\t// \tif (nyc) {\r\n\t// \t\tconst nycArr = nyc.data.results;\r\n\t// for (const item in nycArr) {\r\n\t// \treturn nycArr[item];\r\n\t// }\r\n\t// \t}\r\n\t// };\r\n\r\n\t// const dataNy = nycFilter();\r\n\r\n\tconst filter = obj => {\r\n\t\tfor (const propName in obj) {\r\n\t\t\tif (obj[propName] === null || obj[propName] === undefined) {\r\n\t\t\t\tdelete obj[propName];\r\n\t\t\t}\r\n\t\t}\r\n\t\t//return obj;\r\n\t};\r\n\tconst v = filter(nyc);\r\n\tconsole.log(v);\r\n\r\n\tconst getNycResults = () => {\r\n\t\tif (nyc) {\r\n\t\t\tconst nycArr = Object.entries(nyc);\r\n\r\n\t\t\tnycArr.map(([key, value]) => {\r\n\t\t\t\t//console.log(key);\r\n\t\t\t});\r\n\t\t\t// //console.log(typeof nycArr);\r\n\t\t\t// const results = nycArr[0][1].results;\r\n\t\t\t// //console.log(typeof Object.entries(results));\r\n\t\t\t// for (const item in nycArr) {\r\n\t\t\t// \treturn nycArr[item];\r\n\t\t\t// }\r\n\t\t}\r\n\t};\r\n\r\n\tgetNycResults();\r\n\r\n\t// const nycResults = getNycResults();\r\n\t// console.log(nycResults);\r\n\r\n\t// nycResults.map(item => {\r\n\t// \tconsole.log(item);\r\n\t// });\r\n\r\n\t// const nycFiltered = Object.keys(nyc).forEach(\r\n\t// \tkey => nyc[key] == null && delete nyc[key]\r\n\t// );\r\n\r\n\t// const filter =\r\n\t// \tnyc\r\n\t// \t\t? nyc.data.results.map(item => {\r\n\t// \t\t\t\treturn item;\r\n\t// \t\t  })\r\n\t// \t\t: null;\r\n\t// console.log(filter);\r\n\r\n\t//const filter = nyc.filter(item => item);\r\n\r\n\t// const filteredNyc = nyc.data.results.filter(item => item !== null);\r\n\r\n\t// for (let item in nyc) {\r\n\t// \t//console.log(nyc[item]);\r\n\t// }\r\n\r\n\t// }\r\n\t// return (\r\n\t// \t<ol>\r\n\t// \t\t{nycArr.map}(item => (\r\n\t// \t\t\t<li key={item.url}>{item.url.key}</li>\r\n\t// \t\t))}\r\n\t// \t\t{gaurdianArr.map(item => (\r\n\t// \t\t\t<li>{item.webTitle}</li>\r\n\t// \t\t))}\r\n\t// \t</ol>\r\n\t// );\r\n\r\n\treturn 'data';\r\n};\r\n\r\nDataCard.propTypes = {\r\n\tnycState: PropTypes.object.isRequired,\r\n\tgaurdianData: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\tnycState: state.nyc.nycState,\r\n\tgaurdianData: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}