{"ast":null,"code":"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = (props, nycState, gaurdianData) => {\n  const nyc = props.nycState;\n  const gaurdian = props.gaurdianData; // const nycCards = nyc => {\n  // \tif (nyc) {\n  // \t\treturn nyc.map(item => {\n  // \t\t\treturn item;\n  // \t\t});\n  // \t}\n  // };\n  //const nycArr = [];\n  // if (nyc) {\n  // \t//nycArr.push(nyc.data.results);\n  // \tconsole.log(nyc.data.results);\n  // }\n\n  if (nyc.data.results) {\n    //nycArr.push(nyc.data.results);\n    console.log(nyc.data.results);\n    const nycArr = nyc.data.results;\n  } // nycArr.map(item => {\n  // \tconsole.log(item);\n  // });\n  //console.log(nycArr[0]);\n\n\n  const getItem = () => {\n    for (let item in nycArr[0]) {\n      return nycArr[0][item];\n    }\n  };\n\n  console.log(getItem()); // const nycArr = nyc.data.results;\n  // const gaurdianArr = gaurdian.data.response.results;\n\n  const gaurdianArr = []; // if (gaurdian) {\n  // \tconst gaurdianarr = gaurdian.data.response.results;\n  // }\n  // for (let item in nyc) {\n  // \t//console.log(nyc[item]);\n  // }\n  //console.log(nycCards());\n  // const nyc = dataArr[0][1][0];\n  // const gaurdian = dataArr[0][1][1];\n  // let gaurdianFiltered = [];\n  // if (gaurdian !== undefined) {\n  // \tgaurdianFiltered = gaurdian.filter(item => item !== undefined);\n  // }\n  // const nycArr = [];\n  // const gaurdianArr = [];\n  // gaurdianFiltered.map(item => {\n  // \tgaurdianArr.push(item);\n  // });\n  // if (typeof nyc !== 'undefined') {\n  // \tdata.data[0].map(item => {\n  // \t\tnycArr.push(item);\n  // \t});\n  // }\n  // return (\n  // \t<ol>\n  // \t\t{nycArr.map}(item => (\n  // \t\t\t<li key={item.url}>{item.url.key}</li>\n  // \t\t))}\n  // \t\t{gaurdianArr.map(item => (\n  // \t\t\t<li>{item.webTitle}</li>\n  // \t\t))}\n  // \t</ol>\n  // );\n\n  return 'data';\n};\n\nDataCard.propTypes = {\n  nycState: PropTypes.object.isRequired,\n  gaurdianData: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  nycState: state.nyc.nycState,\n  gaurdianData: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","useState","connect","PropTypes","DataCard","props","nycState","gaurdianData","nyc","gaurdian","data","results","console","log","nycArr","getItem","item","gaurdianArr","propTypes","object","isRequired","mapStateToProps","state"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,YAAlB,KAAmC;AACnD,QAAMC,GAAG,GAAGH,KAAK,CAACC,QAAlB;AACA,QAAMG,QAAQ,GAAGJ,KAAK,CAACE,YAAvB,CAFmD,CAInD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA,MAAIC,GAAG,CAACE,IAAJ,CAASC,OAAb,EAAsB;AACrB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACE,IAAJ,CAASC,OAArB;AACA,UAAMG,MAAM,GAAGN,GAAG,CAACE,IAAJ,CAASC,OAAxB;AACA,GAvBkD,CAyBnD;AACA;AACA;AACA;;;AAEA,QAAMI,OAAO,GAAG,MAAM;AACrB,SAAK,IAAIC,IAAT,IAAiBF,MAAM,CAAC,CAAD,CAAvB,EAA4B;AAC3B,aAAOA,MAAM,CAAC,CAAD,CAAN,CAAUE,IAAV,CAAP;AACA;AACD,GAJD;;AAMAJ,EAAAA,OAAO,CAACC,GAAR,CAAYE,OAAO,EAAnB,EApCmD,CAsCnD;AACA;;AACA,QAAME,WAAW,GAAG,EAApB,CAxCmD,CA0CnD;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAO,MAAP;AACA,CAhFD;;AAkFAb,QAAQ,CAACc,SAAT,GAAqB;AACpBZ,EAAAA,QAAQ,EAAEH,SAAS,CAACgB,MAAV,CAAiBC,UADP;AAEpBb,EAAAA,YAAY,EAAEJ,SAAS,CAACgB,MAAV,CAAiBC;AAFX,CAArB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjChB,EAAAA,QAAQ,EAAEgB,KAAK,CAACd,GAAN,CAAUF,QADa;AAEjCC,EAAAA,YAAY,EAAEe,KAAK,CAACb,QAAN,CAAeF;AAFI,CAAL,CAA7B;;AAKA,eAAeL,OAAO,CAACmB,eAAD,CAAP,CAAyBjB,QAAzB,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = (props, nycState, gaurdianData) => {\r\n\tconst nyc = props.nycState;\r\n\tconst gaurdian = props.gaurdianData;\r\n\r\n\t// const nycCards = nyc => {\r\n\t// \tif (nyc) {\r\n\t// \t\treturn nyc.map(item => {\r\n\t// \t\t\treturn item;\r\n\t// \t\t});\r\n\t// \t}\r\n\t// };\r\n\r\n\t//const nycArr = [];\r\n\r\n\t// if (nyc) {\r\n\t// \t//nycArr.push(nyc.data.results);\r\n\t// \tconsole.log(nyc.data.results);\r\n\t// }\r\n\r\n\tif (nyc.data.results) {\r\n\t\t//nycArr.push(nyc.data.results);\r\n\t\tconsole.log(nyc.data.results);\r\n\t\tconst nycArr = nyc.data.results;\r\n\t}\r\n\r\n\t// nycArr.map(item => {\r\n\t// \tconsole.log(item);\r\n\t// });\r\n\t//console.log(nycArr[0]);\r\n\r\n\tconst getItem = () => {\r\n\t\tfor (let item in nycArr[0]) {\r\n\t\t\treturn nycArr[0][item];\r\n\t\t}\r\n\t};\r\n\r\n\tconsole.log(getItem());\r\n\r\n\t// const nycArr = nyc.data.results;\r\n\t// const gaurdianArr = gaurdian.data.response.results;\r\n\tconst gaurdianArr = [];\r\n\r\n\t// if (gaurdian) {\r\n\t// \tconst gaurdianarr = gaurdian.data.response.results;\r\n\t// }\r\n\r\n\t// for (let item in nyc) {\r\n\t// \t//console.log(nyc[item]);\r\n\t// }\r\n\r\n\t//console.log(nycCards());\r\n\r\n\t// const nyc = dataArr[0][1][0];\r\n\t// const gaurdian = dataArr[0][1][1];\r\n\t// let gaurdianFiltered = [];\r\n\t// if (gaurdian !== undefined) {\r\n\t// \tgaurdianFiltered = gaurdian.filter(item => item !== undefined);\r\n\t// }\r\n\t// const nycArr = [];\r\n\t// const gaurdianArr = [];\r\n\t// gaurdianFiltered.map(item => {\r\n\t// \tgaurdianArr.push(item);\r\n\t// });\r\n\t// if (typeof nyc !== 'undefined') {\r\n\t// \tdata.data[0].map(item => {\r\n\t// \t\tnycArr.push(item);\r\n\t// \t});\r\n\t// }\r\n\t// return (\r\n\t// \t<ol>\r\n\t// \t\t{nycArr.map}(item => (\r\n\t// \t\t\t<li key={item.url}>{item.url.key}</li>\r\n\t// \t\t))}\r\n\t// \t\t{gaurdianArr.map(item => (\r\n\t// \t\t\t<li>{item.webTitle}</li>\r\n\t// \t\t))}\r\n\t// \t</ol>\r\n\t// );\r\n\r\n\treturn 'data';\r\n};\r\n\r\nDataCard.propTypes = {\r\n\tnycState: PropTypes.object.isRequired,\r\n\tgaurdianData: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\tnycState: state.nyc.nycState,\r\n\tgaurdianData: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}