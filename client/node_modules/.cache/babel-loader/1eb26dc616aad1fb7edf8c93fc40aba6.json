{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport setAuthToken from '../utils/setAuthToken';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/auth');\n    console.log(res.data);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    console.log(err.message);\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\nexport const register = ({\n  fullname,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    fullname,\n    email,\n    password\n  });\n  console.log('req', body);\n\n  try {\n    const res = await axios.post('/user', body, config);\n    console.log(res);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    //const errors = err.response.data.errors;\n    console.log(err); // if (errors) {\n    // \terrors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    // }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    console.log('login');\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      console.log(errors); //errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/actions/auth.js"],"names":["axios","setAlert","setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","loadUser","dispatch","localStorage","token","res","get","console","log","data","type","payload","err","message","register","fullname","email","password","config","headers","body","JSON","stringify","post","login","errors","response","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { setAlert } from './alert';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nimport {\r\n\tREGISTER_SUCCESS,\r\n\tREGISTER_FAIL,\r\n\tUSER_LOADED,\r\n\tAUTH_ERROR,\r\n\tLOGIN_SUCCESS,\r\n\tLOGIN_FAIL,\r\n\tLOGOUT,\r\n} from './types';\r\n\r\nexport const loadUser = () => async (dispatch) => {\r\n\tif (localStorage.token) {\r\n\t\tsetAuthToken(localStorage.token);\r\n\t}\r\n\ttry {\r\n\t\tconst res = await axios.get('/auth');\r\n\t\tconsole.log(res.data);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: USER_LOADED,\r\n\t\t\tpayload: res.data,\r\n\t\t});\r\n\t} catch (err) {\r\n\t\tconsole.log(err.message);\r\n\t\tdispatch({\r\n\t\t\ttype: AUTH_ERROR,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const register = ({ fullname, email, password }) => async (dispatch) => {\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t},\r\n\t};\r\n\r\n\tconst body = JSON.stringify({ fullname, email, password });\r\n\tconsole.log('req', body);\r\n\ttry {\r\n\t\tconst res = await axios.post('/user', body, config);\r\n\t\tconsole.log(res);\r\n\t\tdispatch({\r\n\t\t\ttype: REGISTER_SUCCESS,\r\n\t\t\tpayload: res.data,\r\n\t\t});\r\n\t\tdispatch(loadUser());\r\n\t} catch (err) {\r\n\t\t//const errors = err.response.data.errors;\r\n\t\tconsole.log(err);\r\n\t\t// if (errors) {\r\n\t\t// \terrors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n\t\t// }\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: REGISTER_FAIL,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// Login User\r\nexport const login = (email, password) => async (dispatch) => {\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t},\r\n\t};\r\n\r\n\tconst body = JSON.stringify({ email, password });\r\n\r\n\ttry {\r\n\t\tconst res = await axios.post('/auth', body, config);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: LOGIN_SUCCESS,\r\n\t\t\tpayload: res.data,\r\n\t\t});\r\n\t\tconsole.log('login');\r\n\r\n\t\tdispatch(loadUser());\r\n\t} catch (err) {\r\n\t\tconst errors = err.response.data.errors;\r\n\r\n\t\tif (errors) {\r\n\t\t\tconsole.log(errors);\r\n\t\t\t//errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n\t\t}\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: LOGIN_FAIL,\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// Logout / Clear Profile\r\nexport const logout = () => (dispatch) => {\r\n\tdispatch({ type: LOGOUT });\r\n\tdispatch({ type: LOGOUT });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}