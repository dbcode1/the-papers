{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataCard.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = ({\n  data\n}) => {\n  // break up data\n  const nyt = data.data[0];\n  const gaurdian = data.data[1];\n  const fred = Object.entries(data.data); // fred.map(item => {\n  // \tconsole.log(item);\n  // });\n  // const process = arr => {\n  // \treturn typeof arr == 'undefined'\n  // \t\t? null\n  // \t\t: arr.map(item => {\n  // \t\t\t\treturn item;\n  // \t\t  });\n  // };\n  // const nytData = process(nyt);\n  // const gaurdianData = process(gaurdian);\n  // if (typeof nyt !== 'undefined') {\n  // \tObject.entries(gaurdianData).map(item => {\n  // \t\t//console.log(item);\n  // \t});\n  // }\n  //console.log(nytData);\n  //console.log(Object.entries(nytData));\n  // const combineData = (arr1, arr2) => {\n  // \treturn nytData !== null ? arr1.concat(arr2) : null;\n  // };\n  // const allData = combineData(nytData, gaurdianData);\n  // console.log(allData);\n  //if (allData !== null) {\n  // allData.map(item => {\n  // \tif (allData) {\n  // \t\treturn <h1>data</h1>;\n  // \t}\n  // });\n  // //}\n\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \"data\");\n}; // if (typeof gaurdian !== 'undefined') {\n// \tgaurdian.map(item => {\n// \t\tconsole.log(item);\n// \t});\n// }\n\n\nDataCard.propTypes = {\n  DataCard: PropTypes.func.isRequired,\n  data: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","connect","PropTypes","DataCard","data","nyt","gaurdian","fred","Object","entries","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC9B;AACA,QAAMC,GAAG,GAAGD,IAAI,CAACA,IAAL,CAAU,CAAV,CAAZ;AACA,QAAME,QAAQ,GAAGF,IAAI,CAACA,IAAL,CAAU,CAAV,CAAjB;AAEA,QAAMG,IAAI,GAAGC,MAAM,CAACC,OAAP,CAAeL,IAAI,CAACA,IAApB,CAAb,CAL8B,CAO9B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA,CA/CD,C,CAiDA;AACA;AACA;AACA;AACA;;;AAEAD,QAAQ,CAACO,SAAT,GAAqB;AACpBP,EAAAA,QAAQ,EAAED,SAAS,CAACS,IAAV,CAAeC,UADL;AAEpBR,EAAAA,IAAI,EAAEF,SAAS,CAACW,MAAV,CAAiBD;AAFH,CAArB;;AAIA,MAAME,eAAe,GAAGC,KAAK,KAAK;AACjCX,EAAAA,IAAI,EAAEW,KAAK,CAACX;AADqB,CAAL,CAA7B;;AAIA,eAAeH,OAAO,CAACa,eAAD,CAAP,CAAyBX,QAAzB,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = ({ data }) => {\r\n\t// break up data\r\n\tconst nyt = data.data[0];\r\n\tconst gaurdian = data.data[1];\r\n\r\n\tconst fred = Object.entries(data.data);\r\n\r\n\t// fred.map(item => {\r\n\t// \tconsole.log(item);\r\n\t// });\r\n\r\n\t// const process = arr => {\r\n\t// \treturn typeof arr == 'undefined'\r\n\t// \t\t? null\r\n\t// \t\t: arr.map(item => {\r\n\t// \t\t\t\treturn item;\r\n\t// \t\t  });\r\n\t// };\r\n\t// const nytData = process(nyt);\r\n\t// const gaurdianData = process(gaurdian);\r\n\r\n\t// if (typeof nyt !== 'undefined') {\r\n\t// \tObject.entries(gaurdianData).map(item => {\r\n\t// \t\t//console.log(item);\r\n\t// \t});\r\n\t// }\r\n\r\n\t//console.log(nytData);\r\n\r\n\t//console.log(Object.entries(nytData));\r\n\r\n\t// const combineData = (arr1, arr2) => {\r\n\t// \treturn nytData !== null ? arr1.concat(arr2) : null;\r\n\t// };\r\n\r\n\t// const allData = combineData(nytData, gaurdianData);\r\n\t// console.log(allData);\r\n\r\n\t//if (allData !== null) {\r\n\t// allData.map(item => {\r\n\t// \tif (allData) {\r\n\t// \t\treturn <h1>data</h1>;\r\n\t// \t}\r\n\t// });\r\n\t// //}\r\n\r\n\treturn <h1>data</h1>;\r\n};\r\n\r\n// if (typeof gaurdian !== 'undefined') {\r\n// \tgaurdian.map(item => {\r\n// \t\tconsole.log(item);\r\n// \t});\r\n// }\r\n\r\nDataCard.propTypes = {\r\n\tDataCard: PropTypes.func.isRequired,\r\n\tdata: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n\tdata: state.data\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}