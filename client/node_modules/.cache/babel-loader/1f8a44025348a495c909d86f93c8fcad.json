{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataCard.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactDom from 'react-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst DataCard = props => {\n  // const nycData = props.nyc;\n  // console.log(nycData);\n  // for (const item in nyc) {\n  // \tif (item === undefined || null) {\n  // \t\tconsole.log(nyc[item]);\n  // \t\tdelete nyc[item];\n  // \t\tconsole.log(nyc);\n  // \t}\n  // }\n  // // const initialState = {\n  // // \tfilteredNyc: []\n  // // };\n  // //\tconst [filteredNews, setNews] = usestate(initialState);\n  // const nycArr = Object.entries(nycData);\n  // console.log(nycData);\n  // const check = () => {\n  // \tif (nyc) {\n  // \t\tconst results = nyc.data.results;\n  // \t\treturn results;\n  // \t}\n  // };\n  // console.log(check());\n  // check.map(item => {\n  // \tconsole.log(item)\n  // })\n  //results.filter(item => console.log(item.title));\n  // }\n  // console.log(filteredNyc);\n  // filteredNyc.map(item => {\n  // \tconsole.log(item);\n  // });\n  //console.log(props.results);\n  function listResults(props) {\n    const newsItems = props.results;\n\n    if (props.results) {\n      const items = props.results.map(item => /*#__PURE__*/React.createElement(\"li\", {\n        key: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 44\n        }\n      }, item));\n      return /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }\n      }, newsItems);\n    }\n  }\n\n  listResults();\n};\n\nDataCard.propTypes = {\n  nyc: PropTypes.array.isRequired //gaurdianData: PropTypes.object.isRequired\n\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc.nyc //gaurdianData: state.gaurdian.gaurdianData\n\n});\n\nexport default connect(mapStateToProps)(DataCard);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataCard.js"],"names":["React","useState","useEffect","ReactDom","connect","PropTypes","DataCard","props","listResults","newsItems","results","items","map","item","propTypes","nyc","array","isRequired","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACzB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA,WAASC,WAAT,CAAqBD,KAArB,EAA4B;AAC3B,UAAME,SAAS,GAAGF,KAAK,CAACG,OAAxB;;AACA,QAAIH,KAAK,CAACG,OAAV,EAAmB;AAClB,YAAMC,KAAK,GAAGJ,KAAK,CAACG,OAAN,CAAcE,GAAd,CAAkBC,IAAI,iBAAI;AAAI,QAAA,GAAG,EAAEA,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgBA,IAAhB,CAA1B,CAAd;AACA,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKJ,SAAL,CAAP;AACA;AACD;;AACDD,EAAAA,WAAW;AACX,CAlDD;;AAoDAF,QAAQ,CAACQ,SAAT,GAAqB;AACpBC,EAAAA,GAAG,EAAEV,SAAS,CAACW,KAAV,CAAgBC,UADD,CAEpB;;AAFoB,CAArB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AACjCJ,EAAAA,GAAG,EAAEI,KAAK,CAACJ,GAAN,CAAUA,GADkB,CAEjC;;AAFiC,CAAL,CAA7B;;AAKA,eAAeX,OAAO,CAACc,eAAD,CAAP,CAAyBZ,QAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst DataCard = props => {\r\n\t// const nycData = props.nyc;\r\n\t// console.log(nycData);\r\n\r\n\t// for (const item in nyc) {\r\n\t// \tif (item === undefined || null) {\r\n\t// \t\tconsole.log(nyc[item]);\r\n\t// \t\tdelete nyc[item];\r\n\t// \t\tconsole.log(nyc);\r\n\t// \t}\r\n\t// }\r\n\r\n\t// // const initialState = {\r\n\t// // \tfilteredNyc: []\r\n\t// // };\r\n\r\n\t// //\tconst [filteredNews, setNews] = usestate(initialState);\r\n\r\n\t// const nycArr = Object.entries(nycData);\r\n\t// console.log(nycData);\r\n\t// const check = () => {\r\n\t// \tif (nyc) {\r\n\t// \t\tconst results = nyc.data.results;\r\n\t// \t\treturn results;\r\n\t// \t}\r\n\t// };\r\n\r\n\t// console.log(check());\r\n\r\n\t// check.map(item => {\r\n\t// \tconsole.log(item)\r\n\t// })\r\n\t//results.filter(item => console.log(item.title));\r\n\t// }\r\n\r\n\t// console.log(filteredNyc);\r\n\r\n\t// filteredNyc.map(item => {\r\n\t// \tconsole.log(item);\r\n\t// });\r\n\r\n\t//console.log(props.results);\r\n\tfunction listResults(props) {\r\n\t\tconst newsItems = props.results;\r\n\t\tif (props.results) {\r\n\t\t\tconst items = props.results.map(item => <li key={item}>{item}</li>);\r\n\t\t\treturn <ul>{newsItems}</ul>;\r\n\t\t}\r\n\t}\r\n\tlistResults();\r\n};\r\n\r\nDataCard.propTypes = {\r\n\tnyc: PropTypes.array.isRequired\r\n\t//gaurdianData: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n\tnyc: state.nyc.nyc\r\n\t//gaurdianData: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataCard);\r\n"]},"metadata":{},"sourceType":"module"}