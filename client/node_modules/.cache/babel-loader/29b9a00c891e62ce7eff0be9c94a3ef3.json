{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataView.js\";\nimport React, { useEffect, useState } from 'react'; //import { Link, withRouter } from 'react-router-dom';\n\nimport { getNyc } from '../actions/getNyc';\nimport { getGaurdian } from '../actions/getGaurdian';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DataCard from './DataCard'; // const DataView = ({ getNyc, getGaurdian, nyc }) => {\n// \tuseEffect(() => {\n// \t\tgetNyc();\n// \t\tgetGaurdian();\n// \t}, [getNyc]);\n// \tconst intialState = { nycResults: [] };\n// \tconst [nycResults, setResults] = useState([]);\n// \tconst setResult = (arr, arg) => {\n// \t\tarr.push(arg);\n// \t};\n// \tif (typeof nyc === undefined) {\n// \t\treturn;\n// \t} else if (nyc.hasOwnProperty('nyc')) {\n// \t\tObject.entries(nyc.nyc).map(([key, value]) => {\n// \t\t\tnycResults.push(value);\n// \t\t});\n// \t}\n// \treturn <DataCard results={nycResults} />;\n// };\n\nconst DataView = ({\n  getNyc,\n  getGaurdian,\n  nyc\n}) => {\n  useEffect(() => {\n    getNyc();\n    getGaurdian();\n  }, [getNyc, getGaurdian]);\n  const intialState = {\n    nycResults: []\n  };\n  const [nycResults, setResults] = useState([intialState]); //function to push results\n\n  const pusher = (arr, arg) => {\n    arr.push(arg);\n  }; //function to map\n\n\n  const mapper = (arr, res) => {\n    console.log(`${res.toString()}.${res}`);\n    Object.entries(res.res).map(([key, value]) => {\n      {\n        pusher(nycResults, value);\n        console.log('update', nycResults);\n      }\n    });\n    return arr;\n  }; //create a function to filterResults\n\n\n  const filterResults = (arr, res) => {\n    if (res) {\n      Object.entries(String).map(([key, value]) => {\n        pusher(nycResults, value);\n        console.log('update', nycResults);\n      });\n    } else {\n      return;\n    }\n  };\n\n  const end = filterResults(nycResults, nyc);\n  console.log(end);\n  return /*#__PURE__*/React.createElement(DataCard, {\n    results: nycResults,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  });\n};\n\nDataView.propTypes = {\n  getNyc: PropTypes.func.isRequired,\n  getGaurdian: PropTypes.func.isRequired,\n  nyc: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc //: state.gaurdian.gaurdianData\n\n});\n\nexport default connect(mapStateToProps, {\n  getNyc,\n  getGaurdian\n})(DataView);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataView.js"],"names":["React","useEffect","useState","getNyc","getGaurdian","connect","PropTypes","DataCard","DataView","nyc","intialState","nycResults","setResults","pusher","arr","arg","push","mapper","res","console","log","toString","Object","entries","map","key","value","filterResults","String","end","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n//import { Link, withRouter } from 'react-router-dom';\r\nimport { getNyc } from '../actions/getNyc';\r\nimport { getGaurdian } from '../actions/getGaurdian';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DataCard from './DataCard';\r\n\r\n// const DataView = ({ getNyc, getGaurdian, nyc }) => {\r\n// \tuseEffect(() => {\r\n// \t\tgetNyc();\r\n// \t\tgetGaurdian();\r\n// \t}, [getNyc]);\r\n\r\n// \tconst intialState = { nycResults: [] };\r\n\r\n// \tconst [nycResults, setResults] = useState([]);\r\n\r\n// \tconst setResult = (arr, arg) => {\r\n// \t\tarr.push(arg);\r\n// \t};\r\n\r\n// \tif (typeof nyc === undefined) {\r\n// \t\treturn;\r\n// \t} else if (nyc.hasOwnProperty('nyc')) {\r\n// \t\tObject.entries(nyc.nyc).map(([key, value]) => {\r\n// \t\t\tnycResults.push(value);\r\n// \t\t});\r\n// \t}\r\n// \treturn <DataCard results={nycResults} />;\r\n// };\r\n\r\nconst DataView = ({ getNyc, getGaurdian, nyc }) => {\r\n\tuseEffect(() => {\r\n\t\tgetNyc();\r\n\t\tgetGaurdian();\r\n\t}, [getNyc, getGaurdian]);\r\n\r\n\tconst intialState = { nycResults: [] };\r\n\r\n\tconst [nycResults, setResults] = useState([intialState]);\r\n\r\n\t//function to push results\r\n\tconst pusher = (arr, arg) => {\r\n\t\tarr.push(arg);\r\n\t};\r\n\r\n\t//function to map\r\n\tconst mapper = (arr, res) => {\r\n\t\tconsole.log(`${res.toString()}.${res}`);\r\n\t\tObject.entries(res.res).map(([key, value]) => {\r\n\t\t\t{\r\n\t\t\t\tpusher(nycResults, value);\r\n\t\t\t\tconsole.log('update', nycResults);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn arr;\r\n\t};\r\n\r\n\t//create a function to filterResults\r\n\tconst filterResults = (arr, res) => {\r\n\t\tif (res) {\r\n\t\t\tObject.entries(String).map(([key, value]) => {\r\n\t\t\t\tpusher(nycResults, value);\r\n\t\t\t\tconsole.log('update', nycResults);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\tconst end = filterResults(nycResults, nyc);\r\n\tconsole.log(end);\r\n\r\n\treturn <DataCard results={nycResults} />;\r\n};\r\n\r\nDataView.propTypes = {\r\n\tgetNyc: PropTypes.func.isRequired,\r\n\tgetGaurdian: PropTypes.func.isRequired,\r\n\tnyc: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n\tnyc: state.nyc\r\n\t//: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps, { getNyc, getGaurdian })(DataView);\r\n"]},"metadata":{},"sourceType":"module"}