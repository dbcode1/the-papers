{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataView.js\";\nimport React, { useEffect, useState } from 'react'; //import { Link, withRouter } from 'react-router-dom';\n\nimport { getNyc } from '../actions/getNyc';\nimport { getGaurdian } from '../actions/getGaurdian';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DataCard from './DataCard';\nimport { empty } from '../utilities/empty';\n\nconst DataView = ({\n  getNyc,\n  getGaurdian,\n  nyc\n}) => {\n  useEffect(() => {\n    getNyc(); //getGaurdian();\n  }, []);\n  const [results, setResults] = useState([]);\n\n  const getResults = nyc => {\n    if (typeof nyc === undefined) {\n      return;\n    } else if (nyc.hasOwnProperty('nyc')) {\n      // Object.entries(nyc.nyc).map(item => {\n      // \tconsole.log(item);\n      //})\n      for (const item in nyc.nyc) {\n        return nyc.nyc[item];\n      }\n    }\n  };\n\n  getResults(nyc); // Object.entries(nyc.nyc).map(item => {\n  // \tconsole.log(item);\n  // });\n  // if (nyc) {\n  // Object.entries(nyc.nyc).map(item => {\n  // \tconsole.log(item);\n  // });\n  // }\n\n  return /*#__PURE__*/React.createElement(DataCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  });\n};\n\nDataView.propTypes = {\n  getNyc: PropTypes.func.isRequired,\n  getGaurdian: PropTypes.func.isRequired,\n  nyc: PropTypes.object.isRequired //gaurdianData: PropTypes.object.isRequired\n\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc //: state.gaurdian.gaurdianData\n\n});\n\nexport default connect(mapStateToProps, {\n  getNyc,\n  getGaurdian\n})(DataView);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataView.js"],"names":["React","useEffect","useState","getNyc","getGaurdian","connect","PropTypes","DataCard","empty","DataView","nyc","results","setResults","getResults","undefined","hasOwnProperty","item","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,KAAT,QAAsB,oBAAtB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEN,EAAAA,MAAF;AAAUC,EAAAA,WAAV;AAAuBM,EAAAA;AAAvB,CAAD,KAAkC;AAClDT,EAAAA,SAAS,CAAC,MAAM;AACfE,IAAAA,MAAM,GADS,CAEf;AACA,GAHQ,EAGN,EAHM,CAAT;AAKA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC;;AACA,QAAMW,UAAU,GAAGH,GAAG,IAAI;AACzB,QAAI,OAAOA,GAAP,KAAeI,SAAnB,EAA8B;AAC7B;AACA,KAFD,MAEO,IAAIJ,GAAG,CAACK,cAAJ,CAAmB,KAAnB,CAAJ,EAA+B;AACrC;AACA;AACA;AACA,WAAK,MAAMC,IAAX,IAAmBN,GAAG,CAACA,GAAvB,EAA4B;AAC3B,eAAOA,GAAG,CAACA,GAAJ,CAAQM,IAAR,CAAP;AACA;AACD;AACD,GAXD;;AAaAH,EAAAA,UAAU,CAACH,GAAD,CAAV,CApBkD,CAqBlD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,sBAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACA,CAhCD;;AAkCAD,QAAQ,CAACQ,SAAT,GAAqB;AACpBd,EAAAA,MAAM,EAAEG,SAAS,CAACY,IAAV,CAAeC,UADH;AAEpBf,EAAAA,WAAW,EAAEE,SAAS,CAACY,IAAV,CAAeC,UAFR;AAGpBT,EAAAA,GAAG,EAAEJ,SAAS,CAACc,MAAV,CAAiBD,UAHF,CAIpB;;AAJoB,CAArB;;AAMA,MAAME,eAAe,GAAGC,KAAK,KAAK;AACjCZ,EAAAA,GAAG,EAAEY,KAAK,CAACZ,GADsB,CAEjC;;AAFiC,CAAL,CAA7B;;AAKA,eAAeL,OAAO,CAACgB,eAAD,EAAkB;AAAElB,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAAkDK,QAAlD,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n//import { Link, withRouter } from 'react-router-dom';\r\nimport { getNyc } from '../actions/getNyc';\r\nimport { getGaurdian } from '../actions/getGaurdian';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DataCard from './DataCard';\r\nimport { empty } from '../utilities/empty';\r\n\r\nconst DataView = ({ getNyc, getGaurdian, nyc }) => {\r\n\tuseEffect(() => {\r\n\t\tgetNyc();\r\n\t\t//getGaurdian();\r\n\t}, []);\r\n\r\n\tconst [results, setResults] = useState([]);\r\n\tconst getResults = nyc => {\r\n\t\tif (typeof nyc === undefined) {\r\n\t\t\treturn;\r\n\t\t} else if (nyc.hasOwnProperty('nyc')) {\r\n\t\t\t// Object.entries(nyc.nyc).map(item => {\r\n\t\t\t// \tconsole.log(item);\r\n\t\t\t//})\r\n\t\t\tfor (const item in nyc.nyc) {\r\n\t\t\t\treturn nyc.nyc[item];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tgetResults(nyc);\r\n\t// Object.entries(nyc.nyc).map(item => {\r\n\t// \tconsole.log(item);\r\n\t// });\r\n\r\n\t// if (nyc) {\r\n\t// Object.entries(nyc.nyc).map(item => {\r\n\t// \tconsole.log(item);\r\n\t// });\r\n\t// }\r\n\r\n\treturn <DataCard />;\r\n};\r\n\r\nDataView.propTypes = {\r\n\tgetNyc: PropTypes.func.isRequired,\r\n\tgetGaurdian: PropTypes.func.isRequired,\r\n\tnyc: PropTypes.object.isRequired\r\n\t//gaurdianData: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n\tnyc: state.nyc\r\n\t//: state.gaurdian.gaurdianData\r\n});\r\n\r\nexport default connect(mapStateToProps, { getNyc, getGaurdian })(DataView);\r\n"]},"metadata":{},"sourceType":"module"}