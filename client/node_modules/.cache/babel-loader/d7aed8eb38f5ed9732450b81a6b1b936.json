{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel Brusky\\\\projects\\\\the-papers\\\\client\\\\src\\\\components\\\\DataView.js\";\nimport React, { useEffect, useState } from 'react'; //import { Link, withRouter } from 'react-router-dom';\n\nimport { getNyc } from '../actions/getNyc';\nimport { getGaurdian } from '../actions/getGaurdian';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport DataCard from './DataCard';\n\nconst DataView = ({\n  getNyc,\n  getGaurdian,\n  nyc,\n  gaurdian\n}) => {\n  useEffect(() => {\n    getNyc();\n    getGaurdian();\n  }, [getNyc, getGaurdian]);\n  const nycResults = [];\n  const gaurdianResults = [];\n\n  const update = (arr, arg) => {\n    arr.push(arg);\n  }; // console.log(gaurdian);\n  // if (gaurdian && gaurdian !== null) {\n  // \tgaurdian.map((item) => {\n  // \t\tfor (const key in item.blocks.requestedBodyBlocks) {\n  // \t\t\tconsole.log(\n  // \t\t\t\titem.blocks.requestedBodyBlocks[key].map((item) => {\n  // \t\t\t\t\tconsole.log(item.bodyTextSummary);\n  // \t\t\t\t})\n  // \t\t\t);\n  // \t\t\tconsole.log(item);\n  // \t\t}\n  // \t});\n  // }\n\n\n  if (gaurdian && gaurdian !== null) {\n    const reqOptions1 = gaurdian.map(item => {\n      const requestBlocks = item.blocks.requestedBodyBlocks;\n      return requestBlocks;\n    }); // for (const options in reqOptions1) {\n    // \tconsole.log(reqOptions1[options]);\n    // }\n    // reqOptions1.map((item) => {\n    // \tconsole.log(item);\n    // });\n\n    const reqOptions2 = reqOptions1 ? reqOptions1.map(item => {\n      return item;\n    }) : '';\n    const reqOptions3 = reqOptions2 ? reqOptions2.map(item => {\n      return item;\n    }) : '';\n    console.log(reqOptions3);\n  } // if (gaurdian) {\n  // \tconsole.log(gaurdian.hasOwnProperty());\n  // \tObject.entries(gaurdian.gaurdianData).map(([key, value]) => {\n  // \t\t//console.log(typeof nycResults);\n  // \t\tgaurdianResults.push(value);\n  // \t});\n  // }\n\n\n  if (!nyc) {\n    return;\n  } else if (nyc.hasOwnProperty('nyc')) {\n    Object.entries(nyc.nyc).map(([key, value]) => {\n      //console.log(typeof nycResults);\n      nycResults.push(value);\n    });\n  } //objFilter(nycResults, nyc);\n\n\n  return /*#__PURE__*/React.createElement(DataCard, {\n    nycNews: nycResults,\n    gaurdianNews: gaurdianResults,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  });\n};\n\nconst mapStateToProps = state => ({\n  nyc: state.nyc,\n  gaurdian: state.gaurdian.gaurdianData\n});\n\nexport default connect(mapStateToProps, {\n  getNyc,\n  getGaurdian\n})(DataView);","map":{"version":3,"sources":["C:/Users/Daniel Brusky/projects/the-papers/client/src/components/DataView.js"],"names":["React","useEffect","useState","getNyc","getGaurdian","connect","PropTypes","DataCard","DataView","nyc","gaurdian","nycResults","gaurdianResults","update","arr","arg","push","reqOptions1","map","item","requestBlocks","blocks","requestedBodyBlocks","reqOptions2","reqOptions3","console","log","hasOwnProperty","Object","entries","key","value","mapStateToProps","state","gaurdianData"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEL,EAAAA,MAAF;AAAUC,EAAAA,WAAV;AAAuBK,EAAAA,GAAvB;AAA4BC,EAAAA;AAA5B,CAAD,KAA4C;AAC5DT,EAAAA,SAAS,CAAC,MAAM;AACfE,IAAAA,MAAM;AACNC,IAAAA,WAAW;AACX,GAHQ,EAGN,CAACD,MAAD,EAASC,WAAT,CAHM,CAAT;AAKA,QAAMO,UAAU,GAAG,EAAnB;AACA,QAAMC,eAAe,GAAG,EAAxB;;AAEA,QAAMC,MAAM,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5BD,IAAAA,GAAG,CAACE,IAAJ,CAASD,GAAT;AACA,GAFD,CAT4D,CAa5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAIL,QAAQ,IAAIA,QAAQ,KAAK,IAA7B,EAAmC;AAClC,UAAMO,WAAW,GAAGP,QAAQ,CAACQ,GAAT,CAAcC,IAAD,IAAU;AAC1C,YAAMC,aAAa,GAAGD,IAAI,CAACE,MAAL,CAAYC,mBAAlC;AACA,aAAOF,aAAP;AACA,KAHmB,CAApB,CADkC,CAMlC;AACA;AACA;AAEA;AACA;AACA;;AAEA,UAAMG,WAAW,GAAGN,WAAW,GAC5BA,WAAW,CAACC,GAAZ,CAAiBC,IAAD,IAAU;AAC1B,aAAOA,IAAP;AACC,KAFD,CAD4B,GAI5B,EAJH;AAMA,UAAMK,WAAW,GAAGD,WAAW,GAC5BA,WAAW,CAACL,GAAZ,CAAiBC,IAAD,IAAU;AAC1B,aAAOA,IAAP;AACC,KAFD,CAD4B,GAI5B,EAJH;AAMAM,IAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACA,GAtD2D,CAwD5D;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAI,CAACf,GAAL,EAAU;AACT;AACA,GAFD,MAEO,IAAIA,GAAG,CAACkB,cAAJ,CAAmB,KAAnB,CAAJ,EAA+B;AACrCC,IAAAA,MAAM,CAACC,OAAP,CAAepB,GAAG,CAACA,GAAnB,EAAwBS,GAAxB,CAA4B,CAAC,CAACY,GAAD,EAAMC,KAAN,CAAD,KAAkB;AAC7C;AACApB,MAAAA,UAAU,CAACK,IAAX,CAAgBe,KAAhB;AACA,KAHD;AAIA,GAvE2D,CAyE5D;;;AACA,sBAAO,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAEpB,UAAnB;AAA+B,IAAA,YAAY,EAAEC,eAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACA,CA3ED;;AA6EA,MAAMoB,eAAe,GAAIC,KAAD,KAAY;AACnCxB,EAAAA,GAAG,EAAEwB,KAAK,CAACxB,GADwB;AAEnCC,EAAAA,QAAQ,EAAEuB,KAAK,CAACvB,QAAN,CAAewB;AAFU,CAAZ,CAAxB;;AAKA,eAAe7B,OAAO,CAAC2B,eAAD,EAAkB;AAAE7B,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAlB,CAAP,CAAkDI,QAAlD,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n//import { Link, withRouter } from 'react-router-dom';\r\nimport { getNyc } from '../actions/getNyc';\r\nimport { getGaurdian } from '../actions/getGaurdian';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport DataCard from './DataCard';\r\n\r\nconst DataView = ({ getNyc, getGaurdian, nyc, gaurdian }) => {\r\n\tuseEffect(() => {\r\n\t\tgetNyc();\r\n\t\tgetGaurdian();\r\n\t}, [getNyc, getGaurdian]);\r\n\r\n\tconst nycResults = [];\r\n\tconst gaurdianResults = [];\r\n\r\n\tconst update = (arr, arg) => {\r\n\t\tarr.push(arg);\r\n\t};\r\n\r\n\t// console.log(gaurdian);\r\n\t// if (gaurdian && gaurdian !== null) {\r\n\t// \tgaurdian.map((item) => {\r\n\t// \t\tfor (const key in item.blocks.requestedBodyBlocks) {\r\n\t// \t\t\tconsole.log(\r\n\t// \t\t\t\titem.blocks.requestedBodyBlocks[key].map((item) => {\r\n\t// \t\t\t\t\tconsole.log(item.bodyTextSummary);\r\n\t// \t\t\t\t})\r\n\t// \t\t\t);\r\n\t// \t\t\tconsole.log(item);\r\n\t// \t\t}\r\n\t// \t});\r\n\t// }\r\n\r\n\tif (gaurdian && gaurdian !== null) {\r\n\t\tconst reqOptions1 = gaurdian.map((item) => {\r\n\t\t\tconst requestBlocks = item.blocks.requestedBodyBlocks;\r\n\t\t\treturn requestBlocks;\r\n\t\t});\r\n\r\n\t\t// for (const options in reqOptions1) {\r\n\t\t// \tconsole.log(reqOptions1[options]);\r\n\t\t// }\r\n\r\n\t\t// reqOptions1.map((item) => {\r\n\t\t// \tconsole.log(item);\r\n\t\t// });\r\n\r\n\t\tconst reqOptions2 = reqOptions1\r\n\t\t\t? reqOptions1.map((item) => {\r\n\t\t\t\t\treturn item;\r\n\t\t\t  })\r\n\t\t\t: '';\r\n\r\n\t\tconst reqOptions3 = reqOptions2\r\n\t\t\t? reqOptions2.map((item) => {\r\n\t\t\t\t\treturn item;\r\n\t\t\t  })\r\n\t\t\t: '';\r\n\r\n\t\tconsole.log(reqOptions3);\r\n\t}\r\n\r\n\t// if (gaurdian) {\r\n\t// \tconsole.log(gaurdian.hasOwnProperty());\r\n\t// \tObject.entries(gaurdian.gaurdianData).map(([key, value]) => {\r\n\t// \t\t//console.log(typeof nycResults);\r\n\t// \t\tgaurdianResults.push(value);\r\n\t// \t});\r\n\t// }\r\n\r\n\tif (!nyc) {\r\n\t\treturn;\r\n\t} else if (nyc.hasOwnProperty('nyc')) {\r\n\t\tObject.entries(nyc.nyc).map(([key, value]) => {\r\n\t\t\t//console.log(typeof nycResults);\r\n\t\t\tnycResults.push(value);\r\n\t\t});\r\n\t}\r\n\r\n\t//objFilter(nycResults, nyc);\r\n\treturn <DataCard nycNews={nycResults} gaurdianNews={gaurdianResults} />;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n\tnyc: state.nyc,\r\n\tgaurdian: state.gaurdian.gaurdianData,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getNyc, getGaurdian })(DataView);\r\n"]},"metadata":{},"sourceType":"module"}